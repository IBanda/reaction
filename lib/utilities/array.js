'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities;


function guarantee(arrayOrElement) {
  arrayOrElement = arrayOrElement || [];

  return arrayOrElement instanceof Array ? arrayOrElement : [arrayOrElement];
}

function remaining(element, array) {
  if (element === null) {
    return array;
  }

  var index = indexOf(element, array);

  return array.slice(index + 1);
}

module.exports = Object.assign(arrayUtilities, {
  guarantee: guarantee,
  remaining: remaining
});

function indexOf(element, array) {
  var index = null;

  array.some(function (currentElement, currentElementIndex) {
    if (currentElement === element) {
      index = currentElementIndex;

      return true;
    }
  });

  return index;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvYXJyYXkuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZ3VhcmFudGVlIiwiYXJyYXlPckVsZW1lbnQiLCJBcnJheSIsInJlbWFpbmluZyIsImVsZW1lbnQiLCJhcnJheSIsImluZGV4IiwiaW5kZXhPZiIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9iamVjdCIsImFzc2lnbiIsInNvbWUiLCJjdXJyZW50RWxlbWVudCIsImN1cnJlbnRFbGVtZW50SW5kZXgiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7SUFFUUMsYyxHQUFtQkYsUyxDQUFuQkUsYzs7O0FBRVIsU0FBU0MsU0FBVCxDQUFtQkMsY0FBbkIsRUFBbUM7QUFDakNBLG1CQUFpQkEsa0JBQWtCLEVBQW5DOztBQUVBLFNBQVFBLDBCQUEwQkMsS0FBM0IsR0FDR0QsY0FESCxHQUVLLENBQUNBLGNBQUQsQ0FGWjtBQUdEOztBQUVELFNBQVNFLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFJRCxZQUFZLElBQWhCLEVBQXNCO0FBQ3BCLFdBQU9DLEtBQVA7QUFDRDs7QUFFRCxNQUFNQyxRQUFRQyxRQUFRSCxPQUFSLEVBQWlCQyxLQUFqQixDQUFkOztBQUVBLFNBQU9BLE1BQU1HLEtBQU4sQ0FBWUYsUUFBUSxDQUFwQixDQUFQO0FBQ0Q7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUJDLE9BQU9DLE1BQVAsQ0FBY2IsY0FBZCxFQUE4QjtBQUM3Q0MsYUFBV0EsU0FEa0M7QUFFN0NHLGFBQVdBO0FBRmtDLENBQTlCLENBQWpCOztBQUtBLFNBQVNJLE9BQVQsQ0FBaUJILE9BQWpCLEVBQTBCQyxLQUExQixFQUFpQztBQUMvQixNQUFJQyxRQUFRLElBQVo7O0FBRUFELFFBQU1RLElBQU4sQ0FBVyxVQUFTQyxjQUFULEVBQXlCQyxtQkFBekIsRUFBOEM7QUFDdkQsUUFBSUQsbUJBQW1CVixPQUF2QixFQUFnQztBQUM5QkUsY0FBUVMsbUJBQVI7O0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5EOztBQVFBLFNBQU9ULEtBQVA7QUFDRCIsImZpbGUiOiJhcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeTtcblxuZnVuY3Rpb24gZ3VhcmFudGVlKGFycmF5T3JFbGVtZW50KSB7XG4gIGFycmF5T3JFbGVtZW50ID0gYXJyYXlPckVsZW1lbnQgfHwgW107XG5cbiAgcmV0dXJuIChhcnJheU9yRWxlbWVudCBpbnN0YW5jZW9mIEFycmF5KSA/XG4gICAgICAgICAgICBhcnJheU9yRWxlbWVudCA6XG4gICAgICAgICAgICAgIFthcnJheU9yRWxlbWVudF07XG59XG5cbmZ1bmN0aW9uIHJlbWFpbmluZyhlbGVtZW50LCBhcnJheSkge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIGNvbnN0IGluZGV4ID0gaW5kZXhPZihlbGVtZW50LCBhcnJheSk7XG5cbiAgcmV0dXJuIGFycmF5LnNsaWNlKGluZGV4ICsgMSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbihhcnJheVV0aWxpdGllcywge1xuICBndWFyYW50ZWU6IGd1YXJhbnRlZSxcbiAgcmVtYWluaW5nOiByZW1haW5pbmdcbn0pO1xuXG5mdW5jdGlvbiBpbmRleE9mKGVsZW1lbnQsIGFycmF5KSB7XG4gIGxldCBpbmRleCA9IG51bGw7XG5cbiAgYXJyYXkuc29tZShmdW5jdGlvbihjdXJyZW50RWxlbWVudCwgY3VycmVudEVsZW1lbnRJbmRleCkge1xuICAgIGlmIChjdXJyZW50RWxlbWVudCA9PT0gZWxlbWVudCkge1xuICAgICAgaW5kZXggPSBjdXJyZW50RWxlbWVudEluZGV4O1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpbmRleDtcbn0iXX0=