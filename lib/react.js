"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _element = _interopRequireDefault(require("./element"));

var _reactClass = _interopRequireDefault(require("./reactClass"));

var _reactComponent2 = _interopRequireDefault(require("./reactComponent"));

var _class = _interopRequireDefault(require("./element/react/class"));

var _function = _interopRequireDefault(require("./element/react/function"));

var _component = _interopRequireDefault(require("./element/react/component"));

var _textElement = _interopRequireDefault(require("./element/virtualDOMNode/textElement"));

var _html = _interopRequireDefault(require("./element/virtualDOMNode/element/html"));

var _svg = _interopRequireDefault(require("./element/virtualDOMNode/element/svg"));

var _array = require("./utilities/array");

var _name = require("./utilities/name");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function createClass(object) {
  return _reactClass["default"].create(object);
}

function createElement(firstArgument, properties) {
  var element = null;

  if (firstArgument !== undefined) {
    for (var _len = arguments.length, remainingArguments = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      remainingArguments[_key - 2] = arguments[_key];
    }

    var children = childrenFromRemainingArguments(remainingArguments),
        props = Object.assign({}, properties, {
      children: children
    });

    if (false) {///
    } else if (typeof firstArgument === "string") {
      var tagName = firstArgument,
          ///
      virtualDOMElement = (0, _name.isSVGTagName)(tagName) ? new _svg["default"](tagName, props) : new _html["default"](tagName, props);
      element = virtualDOMElement; ///
    } else if (firstArgument instanceof _reactClass["default"]) {
      var reactClass = firstArgument,
          ///
      reactClassElement = new _class["default"](reactClass, props);
      element = reactClassElement; ///

      var mixins = reactClass.mixins;
      assignMixins(mixins, element);
    } else if (isSubclassOf(firstArgument, _reactComponent2["default"])) {
      var _ReactComponent = firstArgument,
          ///
      reactComponent = new _ReactComponent(),
          reactComponentElement = new _component["default"](reactComponent, props);
      element = reactComponentElement; ///

      assignReactComponentMixins(_ReactComponent, element);
    } else if (typeof firstArgument === "function") {
      var reactFunction = firstArgument,
          ///
      reactFunctionElement = new _function["default"](reactFunction, props);
      element = reactFunctionElement; ///
    }
  }

  return element;
}

var Component = _reactComponent2["default"],
    ///
React = {
  Component: Component,
  createClass: createClass,
  createElement: createElement
};
var _default = React;
exports["default"] = _default;

function childrenFromRemainingArguments(remainingArguments) {
  remainingArguments = (0, _array.flatten)(remainingArguments); ///

  var children = remainingArguments.map(function (childArgument) {
    var child;

    if (isSubclassOf(childArgument.constructor, _element["default"])) {
      ///
      child = childArgument; ///
    } else {
      var text = childArgument,
          ///
      virtualDOMTextElement = new _textElement["default"](text);
      child = virtualDOMTextElement;
    }

    return child;
  });
  return children;
}

function assignReactComponentMixins(reactComponent, element) {
  var _reactComponent = reactComponent,
      mixins = _reactComponent.mixins;
  reactComponent = Object.getPrototypeOf(reactComponent); ///

  if (reactComponent !== _reactComponent2["default"]) {
    assignReactComponentMixins(reactComponent, element);
  }

  assignMixins(mixins, element);
}

function assignMixins(mixins, element) {
  if (mixins) {
    mixins.forEach(function (mixin) {
      var name = mixin.name;
      element[name] = mixin.bind(element);
    });
  }
}

function isSubclassOf(argument, Class) {
  var subclass = false;

  if (argument.name === Class.name) {
    ///
    subclass = true;
  } else {
    argument = Object.getPrototypeOf(argument); ///

    if (argument !== null) {
      subclass = isSubclassOf(argument, Class);
    }
  }

  return subclass;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,