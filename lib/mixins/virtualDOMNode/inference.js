'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function setAttribute(name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      this.domElement[name][key] = value[key];
    }.bind(this));
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      this.domElement.setAttribute(name, value);
    }
  } else {
    this.domElement.setAttribute(name, value);
  }
}

function getAttribute(name) {
  return this.domElement.getAttribute(name);
}

function clearAttribute(name) {
  this.domElement.removeAttribute(name);
}

function addAttribute(name, value) {
  this.setAttribute(name, value);
}

function removeAttribute(name) {
  this.domElement.removeAttribute(name);
}

function setClass(className) {
  this.domElement.className = className;
}

function addClass(className) {
  this.domElement.classList.add(className);
}

function removeClass(className) {
  this.domElement.classList.remove(className);
}

function toggleClass(className) {
  this.domElement.classList.toggle(className);
}

function hasClass(className) {
  return this.domElement.classList.contains(className);
}

function hasClasses(classNames) {
  return classNames.every(function (className) {
    return this.hasClass(className);
  }.bind(this));
}

function clearClasses() {
  this.domElement.className = '';
}

function getTagName() {
  return this.domElement.tagName;
}

function setStyle(name, value) {
  this.domElement.style[name] = value;
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9taXhpbnMvdmlydHVhbERPTU5vZGUvaW5mZXJlbmNlLmpzIl0sIm5hbWVzIjpbInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImtleXMiLCJPYmplY3QiLCJmb3JFYWNoIiwia2V5IiwiZG9tRWxlbWVudCIsImJpbmQiLCJnZXRBdHRyaWJ1dGUiLCJjbGVhckF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImFkZEF0dHJpYnV0ZSIsInNldENsYXNzIiwiY2xhc3NOYW1lIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsInRvZ2dsZUNsYXNzIiwidG9nZ2xlIiwiaGFzQ2xhc3MiLCJjb250YWlucyIsImhhc0NsYXNzZXMiLCJjbGFzc05hbWVzIiwiZXZlcnkiLCJjbGVhckNsYXNzZXMiLCJnZXRUYWdOYW1lIiwidGFnTmFtZSIsInNldFN0eWxlIiwic3R5bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFJRCxTQUFTLFdBQWIsRUFBMEI7QUFDeEJBLFdBQU8sT0FBUDtBQUNEOztBQUVELE1BQUlBLFNBQVMsU0FBYixFQUF3QjtBQUN0QkEsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSSxRQUFPQyxLQUFQLHlDQUFPQSxLQUFQLE9BQWlCLFFBQXJCLEVBQStCO0FBQzdCLFFBQU1DLE9BQU9DLE9BQU9ELElBQVAsQ0FBWUQsS0FBWixDQUFiOztBQUVBQyxTQUFLRSxPQUFMLENBQWEsVUFBVUMsR0FBVixFQUFlO0FBQzFCLFdBQUtDLFVBQUwsQ0FBZ0JOLElBQWhCLEVBQXNCSyxHQUF0QixJQUE2QkosTUFBTUksR0FBTixDQUE3QjtBQUNELEtBRlksQ0FFWEUsSUFGVyxDQUVOLElBRk0sQ0FBYjtBQUdELEdBTkQsTUFNTyxJQUFJLE9BQU9OLEtBQVAs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WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICBpZiAobmFtZSA9PT0gJ2NsYXNzTmFtZScpIHtcbiAgICBuYW1lID0gJ2NsYXNzJztcbiAgfVxuXG4gIGlmIChuYW1lID09PSAnaHRtbEZvcicpIHtcbiAgICBuYW1lID0gJ2Zvcic7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdGhpcy5kb21FbGVtZW50W25hbWVdW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gbmFtZTsgLy8vXG5cbiAgICAgIHRoaXMuZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUobmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTsgfVxuXG5mdW5jdGlvbiBjbGVhckF0dHJpYnV0ZShuYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7IH1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsgfVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUobmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIHNldENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lOyB9XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzZXMoY2xhc3NOYW1lcykge1xuICByZXR1cm4gY2xhc3NOYW1lcy5ldmVyeShmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDbGFzcyhjbGFzc05hbWUpO1xuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjbGVhckNsYXNzZXMoKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc05hbWUgPSAnJzsgfVxuXG5mdW5jdGlvbiBnZXRUYWdOYW1lKCkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LnRhZ05hbWU7IH1cblxuZnVuY3Rpb24gc2V0U3R5bGUobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5kb21FbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRBdHRyaWJ1dGU6IHNldEF0dHJpYnV0ZSxcbiAgZ2V0QXR0cmlidXRlOiBnZXRBdHRyaWJ1dGUsXG4gIGNsZWFyQXR0cmlidXRlOiBjbGVhckF0dHJpYnV0ZSxcbiAgYWRkQXR0cmlidXRlOiBhZGRBdHRyaWJ1dGUsXG4gIHJlbW92ZUF0dHJpYnV0ZTogcmVtb3ZlQXR0cmlidXRlLFxuICBzZXRDbGFzczogc2V0Q2xhc3MsXG4gIGFkZENsYXNzOiBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgaGFzQ2xhc3NlczogaGFzQ2xhc3NlcyxcbiAgY2xlYXJDbGFzc2VzOiBjbGVhckNsYXNzZXMsXG4gIGdldFRhZ05hbWU6IGdldFRhZ05hbWUsXG4gIHNldFN0eWxlOiBzZXRTdHlsZVxufTtcbiJdfQ==