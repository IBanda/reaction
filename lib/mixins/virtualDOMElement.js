'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function setAttribute(name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      this.domElement[name][key] = value[key];
    }.bind(this));
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      this.domElement.setAttribute(name, value);
    }
  } else {
    this.domElement.setAttribute(name, value);
  }
}

function getAttribute(name) {
  return this.domElement.getAttribute(name);
}

function clearAttribute(name) {
  this.domElement.removeAttribute(name);
}

function addAttribute(name, value) {
  this.setAttribute(name, value);
}

function removeAttribute(name) {
  this.domElement.removeAttribute(name);
}

function hasAttribute(name) {
  return this.domElement.hasAttribute(name);
}

function setClass(className) {
  this.domElement.className = className;
}

function addClass(className) {
  this.domElement.classList.add(className);
}

function removeClass(className) {
  this.domElement.classList.remove(className);
}

function toggleClass(className) {
  this.domElement.classList.toggle(className);
}

function hasClass(className) {
  return this.domElement.classList.contains(className);
}

function hasClasses(classNames) {
  return classNames.every(function (className) {
    return this.hasClass(className);
  }.bind(this));
}

function clearClasses() {
  this.domElement.className = '';
}

function getTagName() {
  return this.domElement.tagName;
}

function setStyle(name, value) {
  this.domElement.style[name] = value;
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  hasAttribute: hasAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvdmlydHVhbERPTUVsZW1lbnQuanMiXSwibmFtZXMiOlsic2V0QXR0cmlidXRlIiwibmFtZSIsInZhbHVlIiwia2V5cyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJkb21FbGVtZW50IiwiYmluZCIsImdldEF0dHJpYnV0ZSIsImNsZWFyQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkQXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwic2V0Q2xhc3MiLCJjbGFzc05hbWUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwicmVtb3ZlIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiaGFzQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJldmVyeSIsImNsZWFyQ2xhc3NlcyIsImdldFRhZ05hbWUiLCJ0YWdOYW1lIiwic2V0U3R5bGUiLCJzdHlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUlELFNBQVMsV0FBYixFQUEwQjtBQUN4QkEsV0FBTyxPQUFQO0FBQ0Q7O0FBRUQsTUFBSUEsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCQSxXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFJLFFBQU9DLEtBQVAseUNBQU9BLEtBQVAsT0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsUUFBTUMsT0FBT0MsT0FBT0QsSUFBUCxDQUFZRCxLQUFaLENBQWI7O0FBRUFDLFNBQUtFLE9BQUwsQ0FBYSxVQUFVQyxHQUFWLEVBQWU7QUFDMUIsV0FBS0MsVUFBTCxDQUFnQk4sSUFBaEIsRUFBc0JLLEdBQXRCLElBQTZCSixNQUFNSSxHQUFOLENBQTdCO0FBQ0QsS0FGWSxDQUVYRSxJQUZXLENBRU4sSUFGTSxDQUFiO0FBR0QsR0FORCxNQU1PLElBQUksT0FBT04s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OiJ2aXJ0dWFsRE9NRWxlbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gIGlmIChuYW1lID09PSAnY2xhc3NOYW1lJykge1xuICAgIG5hbWUgPSAnY2xhc3MnO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdodG1sRm9yJykge1xuICAgIG5hbWUgPSAnZm9yJztcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcblxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB0aGlzLmRvbUVsZW1lbnRbbmFtZV1ba2V5XSA9IHZhbHVlW2tleV07XG4gICAgfS5iaW5kKHRoaXMpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBuYW1lOyAvLy9cblxuICAgICAgdGhpcy5kb21FbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShuYW1lKSB7IHJldHVybiB0aGlzLmRvbUVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIGNsZWFyQXR0cmlidXRlKG5hbWUpIHsgdGhpcy5kb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfVxuXG5mdW5jdGlvbiBhZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHsgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOyB9XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShuYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7IH1cblxuZnVuY3Rpb24gaGFzQXR0cmlidXRlKG5hbWUpIHsgcmV0dXJuIHRoaXMuZG9tRWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSk7IH1cblxuZnVuY3Rpb24gc2V0Q2xhc3MoY2xhc3NOYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc05hbWU7IH1cblxuZnVuY3Rpb24gYWRkQ2xhc3MoY2xhc3NOYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7IH1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7IH1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoY2xhc3NOYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSk7IH1cblxuZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7IHJldHVybiB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7IH1cblxuZnVuY3Rpb24gaGFzQ2xhc3NlcyhjbGFzc05hbWVzKSB7XG4gIHJldHVybiBjbGFzc05hbWVzLmV2ZXJ5KGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSk7XG4gIH0uYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQ2xhc3NlcygpIHsgdGhpcy5kb21FbGVtZW50LmNsYXNzTmFtZSA9ICcnOyB9XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWUoKSB7IHJldHVybiB0aGlzLmRvbUVsZW1lbnQudGFnTmFtZTsgfVxuXG5mdW5jdGlvbiBzZXRTdHlsZShuYW1lLCB2YWx1ZSkge1xuICB0aGlzLmRvbUVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldEF0dHJpYnV0ZSxcbiAgZ2V0QXR0cmlidXRlLFxuICBjbGVhckF0dHJpYnV0ZSxcbiAgYWRkQXR0cmlidXRlLFxuICByZW1vdmVBdHRyaWJ1dGUsXG4gIGhhc0F0dHJpYnV0ZSxcbiAgc2V0Q2xhc3MsXG4gIGFkZENsYXNzLFxuICByZW1vdmVDbGFzcyxcbiAgdG9nZ2xlQ2xhc3MsXG4gIGhhc0NsYXNzLFxuICBoYXNDbGFzc2VzLFxuICBjbGVhckNsYXNzZXMsXG4gIGdldFRhZ05hbWUsXG4gIHNldFN0eWxlXG59O1xuIl19