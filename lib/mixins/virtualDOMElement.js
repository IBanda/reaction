'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function setAttribute(name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      this.domElement[name][key] = value[key];
    }.bind(this));
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      this.domElement.setAttribute(name, value);
    }
  } else {
    this.domElement.setAttribute(name, value);
  }
}

function getAttribute(name) {
  return this.domElement.getAttribute(name);
}

function clearAttribute(name) {
  this.domElement.removeAttribute(name);
}

function addAttribute(name, value) {
  this.setAttribute(name, value);
}

function removeAttribute(name) {
  this.domElement.removeAttribute(name);
}

function hasAttribute(name) {
  return this.domElement.hasAttribute(name);
}

function setClass(className) {
  this.domElement.className = className;
}

function addClass(className) {
  this.domElement.classList.add(className);
}

function removeClass(className) {
  this.domElement.classList.remove(className);
}

function toggleClass(className) {
  this.domElement.classList.toggle(className);
}

function hasClass(className) {
  return this.domElement.classList.contains(className);
}

function hasClasses(classNames) {
  var _this = this;

  return classNames.every(function (className) {
    return _this.hasClass(className);
  });
}

function clearClasses() {
  this.domElement.className = '';
}

function getTagName() {
  return this.domElement.tagName;
}

function setStyle(name, value) {
  this.domElement.style[name] = value;
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  hasAttribute: hasAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvdmlydHVhbERPTUVsZW1lbnQuanMiXSwibmFtZXMiOlsic2V0QXR0cmlidXRlIiwibmFtZSIsInZhbHVlIiwia2V5cyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJkb21FbGVtZW50IiwiYmluZCIsImdldEF0dHJpYnV0ZSIsImNsZWFyQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkQXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwic2V0Q2xhc3MiLCJjbGFzc05hbWUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwicmVtb3ZlIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiaGFzQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJldmVyeSIsImNsZWFyQ2xhc3NlcyIsImdldFRhZ05hbWUiLCJ0YWdOYW1lIiwic2V0U3R5bGUiLCJzdHlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUlELFNBQVMsV0FBYixFQUEwQjtBQUN4QkEsV0FBTyxPQUFQO0FBQ0Q7O0FBRUQsTUFBSUEsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCQSxXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFJLFFBQU9DLEtBQVAseUNBQU9BLEtBQVAsT0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsUUFBTUMsT0FBT0MsT0FBT0QsSUFBUCxDQUFZRCxLQUFaLENBQWI7O0FBRUFDLFNBQUtFLE9BQUwsQ0FBYSxVQUFVQyxHQUFWLEVBQWU7QUFDMUIsV0FBS0MsVUFBTCxDQUFnQk4sSUFBaEIsRUFBc0JLLEdBQXRCLElBQTZCSixNQUFNSSxHQUFOLENBQTdCO0FBQ0QsS0FGWSxDQUVYRSxJQUZXLENBRU4sSUFGTSxDQUFiO0FBR0QsR0FORCxNQU1PLElBQUksT0FBT04s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Q29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICBpZiAobmFtZSA9PT0gJ2NsYXNzTmFtZScpIHtcbiAgICBuYW1lID0gJ2NsYXNzJztcbiAgfVxuXG4gIGlmIChuYW1lID09PSAnaHRtbEZvcicpIHtcbiAgICBuYW1lID0gJ2Zvcic7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdGhpcy5kb21FbGVtZW50W25hbWVdW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gbmFtZTsgLy8vXG5cbiAgICAgIHRoaXMuZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUobmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTsgfVxuXG5mdW5jdGlvbiBjbGVhckF0dHJpYnV0ZShuYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7IH1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsgfVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUobmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0F0dHJpYnV0ZShuYW1lKSB7IHJldHVybiB0aGlzLmRvbUVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIHNldENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lOyB9XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzZXMoY2xhc3NOYW1lcykgeyByZXR1cm4gY2xhc3NOYW1lcy5ldmVyeSgoY2xhc3NOYW1lKSA9PiB0aGlzLmhhc0NsYXNzKGNsYXNzTmFtZSkpOyB9XG5cbmZ1bmN0aW9uIGNsZWFyQ2xhc3NlcygpIHsgdGhpcy5kb21FbGVtZW50LmNsYXNzTmFtZSA9ICcnOyB9XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWUoKSB7IHJldHVybiB0aGlzLmRvbUVsZW1lbnQudGFnTmFtZTsgfVxuXG5mdW5jdGlvbiBzZXRTdHlsZShuYW1lLCB2YWx1ZSkge1xuICB0aGlzLmRvbUVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldEF0dHJpYnV0ZSxcbiAgZ2V0QXR0cmlidXRlLFxuICBjbGVhckF0dHJpYnV0ZSxcbiAgYWRkQXR0cmlidXRlLFxuICByZW1vdmVBdHRyaWJ1dGUsXG4gIGhhc0F0dHJpYnV0ZSxcbiAgc2V0Q2xhc3MsXG4gIGFkZENsYXNzLFxuICByZW1vdmVDbGFzcyxcbiAgdG9nZ2xlQ2xhc3MsXG4gIGhhc0NsYXNzLFxuICBoYXNDbGFzc2VzLFxuICBjbGVhckNsYXNzZXMsXG4gIGdldFRhZ05hbWUsXG4gIHNldFN0eWxlXG59O1xuIl19