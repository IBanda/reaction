'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function setAttribute(name, value) {
  var _this = this;

  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      _this.domElement[name][key] = value[key];
    });
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      this.domElement.setAttribute(name, value);
    }
  } else {
    this.domElement.setAttribute(name, value);
  }
}

function getAttribute(name) {
  return this.domElement.getAttribute(name);
}

function clearAttribute(name) {
  this.domElement.removeAttribute(name);
}

function addAttribute(name, value) {
  this.setAttribute(name, value);
}

function removeAttribute(name) {
  this.domElement.removeAttribute(name);
}

function hasAttribute(name) {
  return this.domElement.hasAttribute(name);
}

function setClass(className) {
  this.domElement.className = className;
}

function addClass(className) {
  this.domElement.classList.add(className);
}

function removeClass(className) {
  this.domElement.classList.remove(className);
}

function toggleClass(className) {
  this.domElement.classList.toggle(className);
}

function hasClass(className) {
  return this.domElement.classList.contains(className);
}

function hasClasses(classNames) {
  var _this2 = this;

  return classNames.every(function (className) {
    return _this2.hasClass(className);
  });
}

function clearClasses() {
  this.domElement.className = '';
}

function getTagName() {
  return this.domElement.tagName;
}

function setStyle(name, value) {
  this.domElement.style[name] = value;
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  hasAttribute: hasAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvdmlydHVhbERPTUVsZW1lbnQuanMiXSwibmFtZXMiOlsic2V0QXR0cmlidXRlIiwibmFtZSIsInZhbHVlIiwia2V5cyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJkb21FbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiY2xlYXJBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhZGRBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJzZXRDbGFzcyIsImNsYXNzTmFtZSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmUiLCJ0b2dnbGVDbGFzcyIsInRvZ2dsZSIsImhhc0NsYXNzIiwiY29udGFpbnMiLCJoYXNDbGFzc2VzIiwiY2xhc3NOYW1lcyIsImV2ZXJ5IiwiY2xlYXJDbGFzc2VzIiwiZ2V0VGFnTmFtZSIsInRhZ05hbWUiLCJzZXRTdHlsZSIsInN0eWxlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsS0FBNUIsRUFBbUM7QUFBQTs7QUFDakMsTUFBSUQsU0FBUyxXQUFiLEVBQTBCO0FBQ3hCQSxXQUFPLE9BQVA7QUFDRDs7QUFFRCxNQUFJQSxTQUFTLFNBQWIsRUFBd0I7QUFDdEJBLFdBQU8sS0FBUDtBQUNEOztBQUVELE1BQUksUUFBT0MsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUFyQixFQUErQjtBQUM3QixRQUFNQyxPQUFPQyxPQUFPRCxJQUFQLENBQVlELEtBQVosQ0FBYjs7QUFFQUMsU0FBS0UsT0FBTCxDQUFhLFVBQUNDLEdBQUQsRUFBUztBQUNwQixZQUFLQyxVQUFMLENBQWdCTixJQUFoQixFQUFzQkssR0FBdEIsSUFBNkJKLE1BQU1JLEdBQU4sQ0FBN0I7QUFDRCxLQUZEO0FBR0QsR0FORCxNQU1PLElBQUksT0FBT0osS0FBUCxLQUFpQixTQUFyQixFQUFnQztBQUNy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bmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICBpZiAobmFtZSA9PT0gJ2NsYXNzTmFtZScpIHtcbiAgICBuYW1lID0gJ2NsYXNzJztcbiAgfVxuXG4gIGlmIChuYW1lID09PSAnaHRtbEZvcicpIHtcbiAgICBuYW1lID0gJ2Zvcic7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG5cbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdGhpcy5kb21FbGVtZW50W25hbWVdW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IG5hbWU7IC8vL1xuXG4gICAgICB0aGlzLmRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kb21FbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlKG5hbWUpIHsgcmV0dXJuIHRoaXMuZG9tRWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7IH1cblxuZnVuY3Rpb24gY2xlYXJBdHRyaWJ1dGUobmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIGFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgeyB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7IH1cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKG5hbWUpIHsgdGhpcy5kb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfVxuXG5mdW5jdGlvbiBoYXNBdHRyaWJ1dGUobmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKTsgfVxuXG5mdW5jdGlvbiBzZXRDbGFzcyhjbGFzc05hbWUpIHsgdGhpcy5kb21FbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTsgfVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhjbGFzc05hbWUpIHsgdGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHsgdGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHsgdGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTsgfVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHsgcmV0dXJuIHRoaXMuZG9tRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTsgfVxuXG5mdW5jdGlvbiBoYXNDbGFzc2VzKGNsYXNzTmFtZXMpIHsgcmV0dXJuIGNsYXNzTmFtZXMuZXZlcnkoKGNsYXNzTmFtZSkgPT4gdGhpcy5oYXNDbGFzcyhjbGFzc05hbWUpKTsgfVxuXG5mdW5jdGlvbiBjbGVhckNsYXNzZXMoKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc05hbWUgPSAnJzsgfVxuXG5mdW5jdGlvbiBnZXRUYWdOYW1lKCkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LnRhZ05hbWU7IH1cblxuZnVuY3Rpb24gc2V0U3R5bGUobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5kb21FbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRBdHRyaWJ1dGUsXG4gIGdldEF0dHJpYnV0ZSxcbiAgY2xlYXJBdHRyaWJ1dGUsXG4gIGFkZEF0dHJpYnV0ZSxcbiAgcmVtb3ZlQXR0cmlidXRlLFxuICBoYXNBdHRyaWJ1dGUsXG4gIHNldENsYXNzLFxuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIHRvZ2dsZUNsYXNzLFxuICBoYXNDbGFzcyxcbiAgaGFzQ2xhc3NlcyxcbiAgY2xlYXJDbGFzc2VzLFxuICBnZXRUYWdOYW1lLFxuICBzZXRTdHlsZVxufTtcbiJdfQ==