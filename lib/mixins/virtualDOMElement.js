'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function setAttribute(name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      this.domElement[name][key] = value[key];
    }.bind(this));
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      this.domElement.setAttribute(name, value);
    }
  } else {
    this.domElement.setAttribute(name, value);
  }
}

function getAttribute(name) {
  return this.domElement.getAttribute(name);
}

function clearAttribute(name) {
  this.domElement.removeAttribute(name);
}

function addAttribute(name, value) {
  this.setAttribute(name, value);
}

function removeAttribute(name) {
  this.domElement.removeAttribute(name);
}

function hasAttribute(name) {
  this.domElement.hasAttribute(name);
}

function setClass(className) {
  this.domElement.className = className;
}

function addClass(className) {
  this.domElement.classList.add(className);
}

function removeClass(className) {
  this.domElement.classList.remove(className);
}

function toggleClass(className) {
  this.domElement.classList.toggle(className);
}

function hasClass(className) {
  return this.domElement.classList.contains(className);
}

function hasClasses(classNames) {
  return classNames.every(function (className) {
    return this.hasClass(className);
  }.bind(this));
}

function clearClasses() {
  this.domElement.className = '';
}

function getTagName() {
  return this.domElement.tagName;
}

function setStyle(name, value) {
  this.domElement.style[name] = value;
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  hasAttribute: hasAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvdmlydHVhbERPTUVsZW1lbnQuanMiXSwibmFtZXMiOlsic2V0QXR0cmlidXRlIiwibmFtZSIsInZhbHVlIiwia2V5cyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJkb21FbGVtZW50IiwiYmluZCIsImdldEF0dHJpYnV0ZSIsImNsZWFyQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkQXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwic2V0Q2xhc3MiLCJjbGFzc05hbWUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwicmVtb3ZlIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiaGFzQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJldmVyeSIsImNsZWFyQ2xhc3NlcyIsImdldFRhZ05hbWUiLCJ0YWdOYW1lIiwic2V0U3R5bGUiLCJzdHlsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQUlELFNBQVMsV0FBYixFQUEwQjtBQUN4QkEsV0FBTyxPQUFQO0FBQ0Q7O0FBRUQsTUFBSUEsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCQSxXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFJLFFBQU9DLEtBQVAseUNBQU9BLEtBQVAsT0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsUUFBTUMsT0FBT0MsT0FBT0QsSUFBUCxDQUFZRCxLQUFaLENBQWI7O0FBRUFDLFNBQUtFLE9BQUwsQ0FBYSxVQUFVQyxHQUFWLEVBQWU7QUFDMUIsV0FBS0MsVUFBTCxDQUFnQk4sSUFBaEIsRUFBc0JLLEdBQXRCLElBQTZCSixNQUFNSSxHQUFOLENBQTdCO0FBQ0QsS0FGWSxDQUVYRSxJQUZXLENBRU4sSUFGTSxDQUFiO0FBR0QsR0FORCxNQU1PLElBQUksT0FBT04s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T01FbGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcbiAgaWYgKG5hbWUgPT09ICdjbGFzc05hbWUnKSB7XG4gICAgbmFtZSA9ICdjbGFzcyc7XG4gIH1cblxuICBpZiAobmFtZSA9PT0gJ2h0bWxGb3InKSB7XG4gICAgbmFtZSA9ICdmb3InO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHRoaXMuZG9tRWxlbWVudFtuYW1lXVtrZXldID0gdmFsdWVba2V5XTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IG5hbWU7IC8vL1xuXG4gICAgICB0aGlzLmRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kb21FbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlKG5hbWUpIHsgcmV0dXJuIHRoaXMuZG9tRWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7IH1cblxuZnVuY3Rpb24gY2xlYXJBdHRyaWJ1dGUobmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIGFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkgeyB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7IH1cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKG5hbWUpIHsgdGhpcy5kb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfVxuXG5mdW5jdGlvbiBoYXNBdHRyaWJ1dGUobmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIHNldENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lOyB9XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzZXMoY2xhc3NOYW1lcykge1xuICByZXR1cm4gY2xhc3NOYW1lcy5ldmVyeShmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDbGFzcyhjbGFzc05hbWUpO1xuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjbGVhckNsYXNzZXMoKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc05hbWUgPSAnJzsgfVxuXG5mdW5jdGlvbiBnZXRUYWdOYW1lKCkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LnRhZ05hbWU7IH1cblxuZnVuY3Rpb24gc2V0U3R5bGUobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5kb21FbGVtZW50LnN0eWxlW25hbWVdID0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRBdHRyaWJ1dGUsXG4gIGdldEF0dHJpYnV0ZSxcbiAgY2xlYXJBdHRyaWJ1dGUsXG4gIGFkZEF0dHJpYnV0ZSxcbiAgcmVtb3ZlQXR0cmlidXRlLFxuICBoYXNBdHRyaWJ1dGUsXG4gIHNldENsYXNzLFxuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIHRvZ2dsZUNsYXNzLFxuICBoYXNDbGFzcyxcbiAgaGFzQ2xhc3NlcyxcbiAgY2xlYXJDbGFzc2VzLFxuICBnZXRUYWdOYW1lLFxuICBzZXRTdHlsZVxufTtcbiJdfQ==