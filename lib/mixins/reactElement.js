'use strict';

function setAttribute(name, value) {
  var firstChild = this.getFirstChild();

  return firstChild.setAttribute(name, value);
}

function getAttribute(name) {
  var firstChild = this.getFirstChild();

  return firstChild.getAttribute(name);
}

function clearAttribute(name) {
  var firstChild = this.getFirstChild();

  firstChild.clearAttribute(name);
}

function addAttribute(name, value) {
  var firstChild = this.getFirstChild();

  firstChild.addAttribute(name, value);
}

function removeAttribute(name) {
  var firstChild = this.getFirstChild();

  firstChild.removeAttribute(name);
}

function setClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.setClass(className);
}

function addClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.addClass(className);
}

function removeClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.removeClass(className);
}

function toggleClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.toggleClass(className);
}

function hasClass(className) {
  var firstChild = this.getFirstChild();

  return firstChild.hasClass(className);
}

function hasClasses(classNames) {
  var firstChild = this.getFirstChild();

  return firstChild.hasClasses(classNames);
}

function clearClasses() {
  var firstChild = this.getFirstChild();

  firstChild.clearClasses();
}

function getTagName() {
  return null; ///
}

function setStyle(name, value) {
  var firstChild = this.getFirstChild();

  firstChild.setStyle(name, value);
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvcmVhY3RFbGVtZW50LmpzIl0sIm5hbWVzIjpbInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImZpcnN0Q2hpbGQiLCJnZXRGaXJzdENoaWxkIiwiZ2V0QXR0cmlidXRlIiwiY2xlYXJBdHRyaWJ1dGUiLCJhZGRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRDbGFzcyIsImNsYXNzTmFtZSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImhhc0NsYXNzIiwiaGFzQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJjbGVhckNsYXNzZXMiLCJnZXRUYWdOYW1lIiwic2V0U3R5bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsTUFBTUMsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBLFNBQU9ELFdBQVdILFlBQVgsQ0FBd0JDLElBQXhCLEVBQThCQyxLQUE5QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0csWUFBVCxDQUFzQkosSUFBdEIsRUFBNEI7QUFDMUIsTUFBTUUsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBLFNBQU9ELFdBQVdFLFlBQVgsQ0FBd0JKLElBQXhCLENBQVA7QUFDRDs7QUFFRCxTQUFTSyxjQUFULENBQXdCTCxJQUF4QixFQUE4QjtBQUM1QixNQUFNRSxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdHLGNBQVgsQ0FBMEJMLElBQTFCO0FBQ0Q7O0FBRUQsU0FBU00sWUFBVCxDQUFzQk4sSUFBdEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQU1DLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV0ksWUFBWCxDQUF3Qk4sSUFBeEIsRUFBOEJDLEtBQTlCO0FBQ0Q7O0FBRUQsU0FBU00sZUFBVCxDQUF5QlAsSUFBekIsRUFBK0I7QUFDN0IsTUFBTUUsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXSyxlQUFYLENBQTJCUCxJQUEzQjtBQUNEOztBQUVELFNBQVNRLFFBQVQsQ0FBa0JDLFNBQWxCLEVBQTZCO0FBQzNCLE1BQU1QLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV00sUUFBWCxDQUFvQkMsU0FBcEI7QUFDRDs7QUFFRCxTQUFTQyxRQUFULENBQWtCRCxTQUFsQixFQUE2QjtBQUMzQixNQUFNUCxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdRLFFBQVgsQ0FBb0JELFNBQXBCO0FBQ0Q7O0FBRUQsU0FBU0UsV0FBVCxDQUFxQkYsU0FBckIsRUFBZ0M7QUFDOUIsTUFBTVAsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXUyxXQUFYLENBQXVCRixTQUF2QjtBQUNEOztBQUVELFNBQVNHLFdBQVQsQ0FBcUJILFNBQXJCLEVBQWdDO0FBQzlCLE1BQU1QLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV1UsV0FBWCxDQUF1QkgsU0FBdkI7QUFDRDs7QUFFRCxTQUFTSSxRQUFULENBQWtCSixTQUFsQixFQUE2QjtBQUMzQixNQUFNUCxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUEsU0FBT0QsV0FBV1csUUFBWCxDQUFvQkosU0FBcEIsQ0FBUDtBQUNEOztBQUVELFNBQVNLLFVBQVQsQ0FBb0JDLFVBQXBCLEVBQWdDO0FBQzlCLE1BQU1iLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQSxTQUFPRCxXQUFXWSxVQUFYLENBQXNCQyxVQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsWUFBVCxHQUF3QjtBQUN0QixNQUFNZCxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdjLFlBQVg7QUFDRDs7QUFFRCxTQUFTQyxVQUFULEdBQXNCO0FBQ3BCLFNBQU8sSUFBUCxDQURvQixDQUNOO0FBQ2Y7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQmxCLElBQWxCLEVBQXdCQyxLQUF4QixFQUErQjtBQUM3QixNQUFNQyxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdnQixRQUFYLENBQW9CbEIsSUFBcEIsRUFBMEJDLEtBQTFCO0FBQ0Q7O0FBRURrQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZyQiw0QkFEZTtBQUVmSyw0QkFGZTtBQUdmQyxnQ0FIZTtBQUlmQyw0QkFKZTtBQUtmQyxrQ0FMZTtBQU1mQyxvQkFOZTtBQU9mRSxvQkFQZTtBQVFmQywwQkFSZTtBQVNmQywwQkFUZTtBQVVmQyxvQkFWZTtBQVdmQyx3QkFYZTtBQVlmRSw0QkFaZTtBQWFmQyx3QkFiZTtBQWNmQztBQWRlLENBQWpCIiwiZmlsZSI6InJlYWN0RWxlbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICByZXR1cm4gZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUobmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgcmV0dXJuIGZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKG5hbWUpO1xufVxuXG5mdW5jdGlvbiBjbGVhckF0dHJpYnV0ZShuYW1lKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLmNsZWFyQXR0cmlidXRlKG5hbWUpO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHsgXG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLmFkZEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShuYW1lKSB7IFxuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcbn1cblxuZnVuY3Rpb24gc2V0Q2xhc3MoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLnNldENsYXNzKGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzTmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5hZGRDbGFzcyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIGZpcnN0Q2hpbGQucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLnRvZ2dsZUNsYXNzKGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgcmV0dXJuIGZpcnN0Q2hpbGQuaGFzQ2xhc3MoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gaGFzQ2xhc3NlcyhjbGFzc05hbWVzKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICByZXR1cm4gZmlyc3RDaGlsZC5oYXNDbGFzc2VzKGNsYXNzTmFtZXMpO1xufVxuXG5mdW5jdGlvbiBjbGVhckNsYXNzZXMoKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLmNsZWFyQ2xhc3NlcygpO1xufVxuXG5mdW5jdGlvbiBnZXRUYWdOYW1lKCkge1xuICByZXR1cm4gbnVsbDsgIC8vL1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZShuYW1lLCB2YWx1ZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5zZXRTdHlsZShuYW1lLCB2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRBdHRyaWJ1dGUsXG4gIGdldEF0dHJpYnV0ZSxcbiAgY2xlYXJBdHRyaWJ1dGUsXG4gIGFkZEF0dHJpYnV0ZSxcbiAgcmVtb3ZlQXR0cmlidXRlLFxuICBzZXRDbGFzcyxcbiAgYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzLFxuICB0b2dnbGVDbGFzcyxcbiAgaGFzQ2xhc3MsXG4gIGhhc0NsYXNzZXMsXG4gIGNsZWFyQ2xhc3NlcyxcbiAgZ2V0VGFnTmFtZSxcbiAgc2V0U3R5bGVcbn07XG4iXX0=