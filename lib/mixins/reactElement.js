'use strict';

function setAttribute(name, value) {
  var firstChild = this.getFirstChild();

  return firstChild.setAttribute(name, value);
}

function getAttribute(name) {
  var firstChild = this.getFirstChild();

  return firstChild.getAttribute(name);
}

function clearAttribute(name) {
  var firstChild = this.getFirstChild();

  firstChild.clearAttribute(name);
}

function addAttribute(name, value) {
  var firstChild = this.getFirstChild();

  firstChild.addAttribute(name, value);
}

function removeAttribute(name) {
  var firstChild = this.getFirstChild();

  firstChild.removeAttribute(name);
}

function hasAttribute(name, value) {
  var firstChild = this.getFirstChild();

  return firstChild.hasAttribute(name, value);
}

function setClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.setClass(className);
}

function addClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.addClass(className);
}

function removeClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.removeClass(className);
}

function toggleClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.toggleClass(className);
}

function hasClass(className) {
  var firstChild = this.getFirstChild();

  return firstChild.hasClass(className);
}

function hasClasses(classNames) {
  var firstChild = this.getFirstChild();

  return firstChild.hasClasses(classNames);
}

function clearClasses() {
  var firstChild = this.getFirstChild();

  firstChild.clearClasses();
}

function getTagName() {
  return null; ///
}

function setStyle(name, value) {
  var firstChild = this.getFirstChild();

  firstChild.setStyle(name, value);
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvcmVhY3RFbGVtZW50LmpzIl0sIm5hbWVzIjpbInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImZpcnN0Q2hpbGQiLCJnZXRGaXJzdENoaWxkIiwiZ2V0QXR0cmlidXRlIiwiY2xlYXJBdHRyaWJ1dGUiLCJhZGRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYXNBdHRyaWJ1dGUiLCJzZXRDbGFzcyIsImNsYXNzTmFtZSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImhhc0NsYXNzIiwiaGFzQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJjbGVhckNsYXNzZXMiLCJnZXRUYWdOYW1lIiwic2V0U3R5bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsTUFBTUMsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBLFNBQU9ELFdBQVdILFlBQVgsQ0FBd0JDLElBQXhCLEVBQThCQyxLQUE5QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0csWUFBVCxDQUFzQkosSUFBdEIsRUFBNEI7QUFDMUIsTUFBTUUsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBLFNBQU9ELFdBQVdFLFlBQVgsQ0FBd0JKLElBQXhCLENBQVA7QUFDRDs7QUFFRCxTQUFTSyxjQUFULENBQXdCTCxJQUF4QixFQUE4QjtBQUM1QixNQUFNRSxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdHLGNBQVgsQ0FBMEJMLElBQTFCO0FBQ0Q7O0FBRUQsU0FBU00sWUFBVCxDQUFzQk4sSUFBdEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQU1DLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV0ksWUFBWCxDQUF3Qk4sSUFBeEIsRUFBOEJDLEtBQTlCO0FBQ0Q7O0FBRUQsU0FBU00sZUFBVCxDQUF5QlAsSUFBekIsRUFBK0I7QUFDN0IsTUFBTUUsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXSyxlQUFYLENBQTJCUCxJQUEzQjtBQUNEOztBQUVELFNBQVNRLFlBQVQsQ0FBc0JSLElBQXRCLEVBQTRCQyxLQUE1QixFQUFtQztBQUNqQyxNQUFNQyxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUEsU0FBT0QsV0FBV00sWUFBWCxDQUF3QlIsSUFBeEIsRUFBOEJDLEtBQTlCLENBQVA7QUFDRDs7QUFFRCxTQUFTUSxRQUFULENBQWtCQyxTQUFsQixFQUE2QjtBQUMzQixNQUFNUixhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdPLFFBQVgsQ0FBb0JDLFNBQXBCO0FBQ0Q7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQkQsU0FBbEIsRUFBNkI7QUFDM0IsTUFBTVIsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXUyxRQUFYLENBQW9CRCxTQUFwQjtBQUNEOztBQUVELFNBQVNFLFdBQVQsQ0FBcUJGLFNBQXJCLEVBQWdDO0FBQzlCLE1BQU1SLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV1UsV0FBWCxDQUF1QkYsU0FBdkI7QUFDRDs7QUFFRCxTQUFTRyxXQUFULENBQXFCSCxTQUFyQixFQUFnQztBQUM5QixNQUFNUixhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdXLFdBQVgsQ0FBdUJILFNBQXZCO0FBQ0Q7O0FBRUQsU0FBU0ksUUFBVCxDQUFrQkosU0FBbEIsRUFBNkI7QUFDM0IsTUFBTVIsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBLFNBQU9ELFdBQVdZLFFBQVgsQ0FBb0JKLFNBQXBCLENBQVA7QUFDRDs7QUFFRCxTQUFTSyxVQUFULENBQW9CQyxVQUFwQixFQUFnQztBQUM5QixNQUFNZCxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUEsU0FBT0QsV0FBV2EsVUFBWCxDQUFzQkMsVUFBdEIsQ0FBUDtBQUNEOztBQUVELFNBQVNDLFlBQVQsR0FBd0I7QUFDdEIsTUFBTWYsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXZSxZQUFYO0FBQ0Q7O0FBRUQsU0FBU0MsVUFBVCxHQUFzQjtBQUNwQixTQUFPLElBQVAsQ0FEb0IsQ0FDTjtBQUNmOztBQUVELFNBQVNDLFFBQVQsQ0FBa0JuQixJQUFsQixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsTUFBTUMsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXaUIsUUFBWCxDQUFvQm5CLElBQXBCLEVBQTBCQyxLQUExQjtBQUNEOztBQUVEbUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmdEIsNEJBRGU7QUFFZkssNEJBRmU7QUFHZkMsZ0NBSGU7QUFJZkMsNEJBSmU7QUFLZkMsa0NBTGU7QUFNZkUsb0JBTmU7QUFPZkUsb0JBUGU7QUFRZkMsMEJBUmU7QUFTZkMsMEJBVGU7QUFVZkMsb0JBVmU7QUFXZkMsd0JBWGU7QUFZZkUsNEJBWmU7QUFhZkMsd0JBYmU7QUFjZkM7QUFkZSxDQUFqQiIsImZpbGUiOiJyZWFjdEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgcmV0dXJuIGZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlKG5hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIHJldHVybiBmaXJzdENoaWxkLmdldEF0dHJpYnV0ZShuYW1lKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJBdHRyaWJ1dGUobmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5jbGVhckF0dHJpYnV0ZShuYW1lKTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7IFxuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5hZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUobmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5yZW1vdmVBdHRyaWJ1dGUobmFtZSlcbn1cblxuZnVuY3Rpb24gaGFzQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICByZXR1cm4gZmlyc3RDaGlsZC5oYXNBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzZXRDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIGZpcnN0Q2hpbGQuc2V0Q2xhc3MoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLmFkZENsYXNzKGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIGZpcnN0Q2hpbGQudG9nZ2xlQ2xhc3MoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICByZXR1cm4gZmlyc3RDaGlsZC5oYXNDbGFzcyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzc2VzKGNsYXNzTmFtZXMpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIHJldHVybiBmaXJzdENoaWxkLmhhc0NsYXNzZXMoY2xhc3NOYW1lcyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQ2xhc3NlcygpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIGZpcnN0Q2hpbGQuY2xlYXJDbGFzc2VzKCk7XG59XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWUoKSB7XG4gIHJldHVybiBudWxsOyAgLy8vXG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKG5hbWUsIHZhbHVlKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLnNldFN0eWxlKG5hbWUsIHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldEF0dHJpYnV0ZSxcbiAgZ2V0QXR0cmlidXRlLFxuICBjbGVhckF0dHJpYnV0ZSxcbiAgYWRkQXR0cmlidXRlLFxuICByZW1vdmVBdHRyaWJ1dGUsXG4gIHNldENsYXNzLFxuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIHRvZ2dsZUNsYXNzLFxuICBoYXNDbGFzcyxcbiAgaGFzQ2xhc3NlcyxcbiAgY2xlYXJDbGFzc2VzLFxuICBnZXRUYWdOYW1lLFxuICBzZXRTdHlsZVxufTtcbiJdfQ==