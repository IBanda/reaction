'use strict';

function setAttribute(name, value) {
  var firstChild = this.getFirstChild();

  return firstChild.setAttribute(name, value);
}

function getAttribute(name) {
  var firstChild = this.getFirstChild();

  return firstChild.getAttribute(name);
}

function clearAttribute(name) {
  var firstChild = this.getFirstChild();

  firstChild.clearAttribute(name);
}

function addAttribute(name, value) {
  var firstChild = this.getFirstChild();

  firstChild.addAttribute(name, value);
}

function removeAttribute(name) {
  var firstChild = this.getFirstChild();

  firstChild.removeAttribute(name);
}

function setClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.setClass(className);
}

function addClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.addClass(className);
}

function removeClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.removeClass(className);
}

function toggleClass(className) {
  var firstChild = this.getFirstChild();

  firstChild.toggleClass(className);
}

function hasClass(className) {
  var firstChild = this.getFirstChild();

  return firstChild.hasClass(className);
}

function hasClasses(classNames) {
  var firstChild = this.getFirstChild();

  return firstChild.hasClasses(classNames);
}

function clearClasses() {
  var firstChild = this.getFirstChild();

  firstChild.clearClasses();
}

function getTagName() {
  return null; ///
}

function setStyle(name, value) {
  var firstChild = this.getFirstChild();

  firstChild.setStyle(name, value);
}

module.exports = {
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName,
  setStyle: setStyle
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi9taXhpbnMvcmVhY3RFbGVtZW50LmpzIl0sIm5hbWVzIjpbInNldEF0dHJpYnV0ZSIsIm5hbWUiLCJ2YWx1ZSIsImZpcnN0Q2hpbGQiLCJnZXRGaXJzdENoaWxkIiwiZ2V0QXR0cmlidXRlIiwiY2xlYXJBdHRyaWJ1dGUiLCJhZGRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRDbGFzcyIsImNsYXNzTmFtZSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImhhc0NsYXNzIiwiaGFzQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJjbGVhckNsYXNzZXMiLCJnZXRUYWdOYW1lIiwic2V0U3R5bGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsTUFBTUMsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBLFNBQU9ELFdBQVdILFlBQVgsQ0FBd0JDLElBQXhCLEVBQThCQyxLQUE5QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0csWUFBVCxDQUFzQkosSUFBdEIsRUFBNEI7QUFDMUIsTUFBTUUsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBLFNBQU9ELFdBQVdFLFlBQVgsQ0FBd0JKLElBQXhCLENBQVA7QUFDRDs7QUFFRCxTQUFTSyxjQUFULENBQXdCTCxJQUF4QixFQUE4QjtBQUM1QixNQUFNRSxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdHLGNBQVgsQ0FBMEJMLElBQTFCO0FBQ0Q7O0FBRUQsU0FBU00sWUFBVCxDQUFzQk4sSUFBdEIsRUFBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDLE1BQU1DLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV0ksWUFBWCxDQUF3Qk4sSUFBeEIsRUFBOEJDLEtBQTlCO0FBQ0Q7O0FBRUQsU0FBU00sZUFBVCxDQUF5QlAsSUFBekIsRUFBK0I7QUFDN0IsTUFBTUUsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXSyxlQUFYLENBQTJCUCxJQUEzQjtBQUNEOztBQUVELFNBQVNRLFFBQVQsQ0FBa0JDLFNBQWxCLEVBQTZCO0FBQzNCLE1BQU1QLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV00sUUFBWCxDQUFvQkMsU0FBcEI7QUFDRDs7QUFFRCxTQUFTQyxRQUFULENBQWtCRCxTQUFsQixFQUE2QjtBQUMzQixNQUFNUCxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdRLFFBQVgsQ0FBb0JELFNBQXBCO0FBQ0Q7O0FBRUQsU0FBU0UsV0FBVCxDQUFxQkYsU0FBckIsRUFBZ0M7QUFDOUIsTUFBTVAsYUFBYSxLQUFLQyxhQUFMLEVBQW5COztBQUVBRCxhQUFXUyxXQUFYLENBQXVCRixTQUF2QjtBQUNEOztBQUVELFNBQVNHLFdBQVQsQ0FBcUJILFNBQXJCLEVBQWdDO0FBQzlCLE1BQU1QLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQUQsYUFBV1UsV0FBWCxDQUF1QkgsU0FBdkI7QUFDRDs7QUFFRCxTQUFTSSxRQUFULENBQWtCSixTQUFsQixFQUE2QjtBQUMzQixNQUFNUCxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUEsU0FBT0QsV0FBV1csUUFBWCxDQUFvQkosU0FBcEIsQ0FBUDtBQUNEOztBQUVELFNBQVNLLFVBQVQsQ0FBb0JDLFVBQXBCLEVBQWdDO0FBQzlCLE1BQU1iLGFBQWEsS0FBS0MsYUFBTCxFQUFuQjs7QUFFQSxTQUFPRCxXQUFXWSxVQUFYLENBQXNCQyxVQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsWUFBVCxHQUF3QjtBQUN0QixNQUFNZCxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdjLFlBQVg7QUFDRDs7QUFFRCxTQUFTQyxVQUFULEdBQXNCO0FBQ3BCLFNBQU8sSUFBUCxDQURvQixDQUNOO0FBQ2Y7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQmxCLElBQWxCLEVBQXdCQyxLQUF4QixFQUErQjtBQUM3QixNQUFNQyxhQUFhLEtBQUtDLGFBQUwsRUFBbkI7O0FBRUFELGFBQVdnQixRQUFYLENBQW9CbEIsSUFBcEIsRUFBMEJDLEtBQTFCO0FBQ0Q7O0FBRURrQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZyQixnQkFBY0EsWUFEQztBQUVmSyxnQkFBY0EsWUFGQztBQUdmQyxrQkFBZ0JBLGNBSEQ7QUFJZkMsZ0JBQWNBLFlBSkM7QUFLZkMsbUJBQWlCQSxlQUxGO0FBTWZDLFlBQVVBLFFBTks7QUFPZkUsWUFBVUEsUUFQSztBQVFmQyxlQUFhQSxXQVJFO0FBU2ZDLGVBQWFBLFdBVEU7QUFVZkMsWUFBVUEsUUFWSztBQVdmQyxjQUFZQSxVQVhHO0FBWWZFLGdCQUFjQSxZQVpDO0FBYWZDLGNBQVlBLFVBYkc7QUFjZkMsWUFBVUE7QUFkSyxDQUFqQiIsImZpbGUiOiJyZWFjdEVsZW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgcmV0dXJuIGZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlKG5hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIHJldHVybiBmaXJzdENoaWxkLmdldEF0dHJpYnV0ZShuYW1lKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJBdHRyaWJ1dGUobmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5jbGVhckF0dHJpYnV0ZShuYW1lKTtcbn1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7IFxuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5hZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUobmFtZSkgeyBcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIGZpcnN0Q2hpbGQucmVtb3ZlQXR0cmlidXRlKG5hbWUpXG59XG5cbmZ1bmN0aW9uIHNldENsYXNzKGNsYXNzTmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5zZXRDbGFzcyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIGZpcnN0Q2hpbGQuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzLmdldEZpcnN0Q2hpbGQoKTtcblxuICBmaXJzdENoaWxkLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC50b2dnbGVDbGFzcyhjbGFzc05hbWUpO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIHJldHVybiBmaXJzdENoaWxkLmhhc0NsYXNzKGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzZXMoY2xhc3NOYW1lcykge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgcmV0dXJuIGZpcnN0Q2hpbGQuaGFzQ2xhc3NlcyhjbGFzc05hbWVzKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJDbGFzc2VzKCkge1xuICBjb25zdCBmaXJzdENoaWxkID0gdGhpcy5nZXRGaXJzdENoaWxkKCk7XG5cbiAgZmlyc3RDaGlsZC5jbGVhckNsYXNzZXMoKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFnTmFtZSgpIHtcbiAgcmV0dXJuIG51bGw7ICAvLy9cbn1cblxuZnVuY3Rpb24gc2V0U3R5bGUobmFtZSwgdmFsdWUpIHtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IHRoaXMuZ2V0Rmlyc3RDaGlsZCgpO1xuXG4gIGZpcnN0Q2hpbGQuc2V0U3R5bGUobmFtZSwgdmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0QXR0cmlidXRlOiBzZXRBdHRyaWJ1dGUsXG4gIGdldEF0dHJpYnV0ZTogZ2V0QXR0cmlidXRlLFxuICBjbGVhckF0dHJpYnV0ZTogY2xlYXJBdHRyaWJ1dGUsXG4gIGFkZEF0dHJpYnV0ZTogYWRkQXR0cmlidXRlLFxuICByZW1vdmVBdHRyaWJ1dGU6IHJlbW92ZUF0dHJpYnV0ZSxcbiAgc2V0Q2xhc3M6IHNldENsYXNzLFxuICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBoYXNDbGFzczogaGFzQ2xhc3MsXG4gIGhhc0NsYXNzZXM6IGhhc0NsYXNzZXMsXG4gIGNsZWFyQ2xhc3NlczogY2xlYXJDbGFzc2VzLFxuICBnZXRUYWdOYW1lOiBnZXRUYWdOYW1lLFxuICBzZXRTdHlsZTogc2V0U3R5bGVcbn07XG4iXX0=