'use strict';

var React = require('../react'),
    ReactDOM = require('../reactDOM');

var Comment = React.createClass({
  render: function render() {
    return React.createElement("div", {
      className: "comment"
    }, React.createElement("p", null, this.props.message));
  },
  componentDidMount: function componentDidMount() {
    var message = this.props.message;
    console.log('Comment mounted with message: ' + message);
  },
  componentWillUnmount: function componentWillUnmount() {
    var message = this.props.message;
    console.log('Comment unmounted with message: ' + message);
  }
});
var CommentsList = React.createClass({
  getInitialState: function getInitialState() {
    var messages = ['Hello, world!', 'Hello world again...'],
        state = {
      messages: messages
    };
    return state;
  },
  componentDidMount: function componentDidMount() {
    console.log('Comments list mounted.');
  },
  render: function render() {
    var state = this.getState(),
        messages = state.messages,
        comments = messages.map(function (message) {
      return React.createElement(Comment, {
        message: message
      });
    });
    return React.createElement("div", {
      className: "comments-list"
    }, comments);
  }
});

var vanillaApp = function vanillaApp() {
  var commentsList = React.createElement(CommentsList, null),
      rootDOMElement = document.getElementById('root');
  ReactDOM.render(commentsList, rootDOMElement);
  setTimeout(function () {
    var messages = ['Hello world yet again!!!'],
        state = {
      messages: messages
    };
    commentsList.setState(state);
  }, 1000); ///
};

module.exports = vanillaApp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbmlsbGFBcHAuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiUmVhY3RET00iLCJDb21tZW50IiwiY3JlYXRlQ2xhc3MiLCJyZW5kZXIiLCJwcm9wcyIsIm1lc3NhZ2UiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnNvbGUiLCJsb2ciLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkNvbW1lbnRzTGlzdCIsImdldEluaXRpYWxTdGF0ZSIsIm1lc3NhZ2VzIiwic3RhdGUiLCJnZXRTdGF0ZSIsImNvbW1lbnRzIiwibWFwIiwidmFuaWxsYUFwcCIsImNvbW1lbnRzTGlzdCIsInJvb3RET01FbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNldFRpbWVvdXQiLCJzZXRTdGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBckI7QUFBQSxJQUNNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBRHhCOztBQUdBLElBQU1FLE9BQU8sR0FBR0gsS0FBSyxDQUFDSSxXQUFOLENBQWtCO0FBQ2hDQyxFQUFBQSxNQUFNLEVBQUUsa0JBQVc7QUFDakIsV0FFRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDRSwrQkFDRyxLQUFLQyxLQUFMLENBQVdDLE9BRGQsQ0FERixDQUZGO0FBU0QsR0FYK0I7QUFhaENDLEVBQUFBLGlCQUFpQixFQUFFLDZCQUFXO0FBQzVCLFFBQU1ELE9BQU8sR0FBRyxLQUFLRCxLQUFMLENBQVdDLE9BQTNCO0FBRUFFLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG1DQUFtQ0gsT0FBL0M7QUFDRCxHQWpCK0I7QUFtQmhDSSxFQUFBQSxvQkFBb0IsRUFBRSxnQ0FBVztBQUMvQixRQUFNSixPQUFPLEdBQUcsS0FBS0QsS0FBTCxDQUFXQyxPQUEzQjtBQUVBRSxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxxQ0FBcUNILE9BQWpEO0FBQ0Q7QUF2QitCLENBQWxCLENBQWhCO0FBMEJBLElBQU1LLFlBQVksR0FBR1osS0FBSyxDQUFDSSxXQUFOLENBQWtCO0FBQ3JDUyxFQUFBQSxlQURxQyw2QkFDbkI7QUFDaEIsUUFBTUMsUUFBUSxHQUFHLENBQ1QsZUFEUyxFQUVULHNCQUZTLENBQWpCO0FBQUEsUUFJTUMsS0FBSyxHQUFHO0FBQ05ELE1BQUFBLFFBQVEsRUFBUkE7QUFETSxLQUpkO0FBUUEsV0FBT0MsS0FBUDtBQUNELEdBWG9DO0FBYXJDUCxFQUFBQSxpQkFBaUIsRUFBRSw2QkFBVztBQUM1QkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksd0JBQVo7QUFDRCxHQWZvQztBQWlCckNMLEVBQUFBLE1BQU0sRUFBRSxrQkFBVztBQUNYLFFBQUFVLEtBQUssR0FBRyxLQUFLQyxRQUFMLEVBQVI7QUFBQSxRQUNFRixRQURGLEdBQ2VDLEtBRGYsQ0FDRUQsUUFERjtBQUFBLFFBRUFHLFFBRkEsR0FFV0gsUUFBUSxDQUFDSSxHQUFULENBQWEsVUFBQ1gsT0FBRDtBQUFBLGFBRXRCLG9CQUFDLE9BQUQ7QUFBUyxRQUFBLE9BQU8sRUFBRUE7QUFBbEIsUUFGc0I7QUFBQSxLQUFiLENBRlg7QUFRTixXQUVFO0FBQUssTUFBQSxTQUFTLEVBQUM7QUFBZixPQUNHVSxRQURILENBRkY7QUFPRDtBQWpDb0MsQ0FBbEIsQ0FBckI7O0FBb0NBLElBQU1FLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQU07QUFDdkIsTUFBTUMsWUFBWSxHQUVWLG9CQUFDLFlBQUQsT0FGUjtBQUFBLE1BS01DLGNBQWMsR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLE1BQXhCLENBTHZCO0FBUUFyQixFQUFBQSxRQUFRLENBQUNHLE1BQVQsQ0FDRWUsWUFERixFQUVFQyxjQUZGO0FBS0FHLEVBQUFBLFVBQVUsQ0FBQyxZQUFXO0FBQ3BCLFFBQU1WLFFBQVEsR0FBRyxDQUNULDBCQURTLENBQWpCO0FBQUEsUUFHTUMsS0FBSyxHQUFHO0FBQ05ELE1BQUFBLFFBQVEsRUFBUkE7QUFETSxLQUhkO0FBT0FNLElBQUFBLFlBQVksQ0FBQ0ssUUFBYixDQUFzQlYsS0FBdEI7QUFDRCxHQVRTLEVBU1AsSUFUTyxDQUFWLENBZHVCLENBdUJiO0FBQ1gsQ0F4QkQ7O0FBMEJBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUJSLFVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJy4uL3JlYWN0JyksXG4gICAgICBSZWFjdERPTSA9IHJlcXVpcmUoJy4uL3JlYWN0RE9NJyk7XG5cbmNvbnN0IENvbW1lbnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIChcblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50XCI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0aGlzLnByb3BzLm1lc3NhZ2V9XG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuXG4gICAgKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMucHJvcHMubWVzc2FnZTtcblxuICAgIGNvbnNvbGUubG9nKCdDb21tZW50IG1vdW50ZWQgd2l0aCBtZXNzYWdlOiAnICsgbWVzc2FnZSlcbiAgfSxcblxuICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMucHJvcHMubWVzc2FnZTtcblxuICAgIGNvbnNvbGUubG9nKCdDb21tZW50IHVubW91bnRlZCB3aXRoIG1lc3NhZ2U6ICcgKyBtZXNzYWdlKVxuICB9XG59KTtcblxuY29uc3QgQ29tbWVudHNMaXN0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBbXG4gICAgICAgICAgICAnSGVsbG8sIHdvcmxkIScsXG4gICAgICAgICAgICAnSGVsbG8gd29ybGQgYWdhaW4uLi4nXG4gICAgICAgICAgXSxcbiAgICAgICAgICBzdGF0ZSA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2VzXG4gICAgICAgICAgfTtcblxuICAgIHJldHVybiBzdGF0ZTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coJ0NvbW1lbnRzIGxpc3QgbW91bnRlZC4nKVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICAgICAgeyBtZXNzYWdlcyB9ID0gc3RhdGUsXG4gICAgICAgICAgY29tbWVudHMgPSBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+XG5cbiAgICAgICAgICAgIDxDb21tZW50IG1lc3NhZ2U9e21lc3NhZ2V9IC8+XG5cbiAgICAgICAgICApO1xuXG4gICAgcmV0dXJuIChcblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50cy1saXN0XCI+XG4gICAgICAgIHtjb21tZW50c31cbiAgICAgIDwvZGl2PlxuXG4gICAgKTtcbiAgfVxufSk7XG5cbmNvbnN0IHZhbmlsbGFBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbW1lbnRzTGlzdCA9XG5cbiAgICAgICAgICA8Q29tbWVudHNMaXN0IC8+XG5cbiAgICAgICAgLFxuICAgICAgICByb290RE9NRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG5cblxuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgY29tbWVudHNMaXN0LFxuICAgIHJvb3RET01FbGVtZW50XG4gICk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IFtcbiAgICAgICAgICAgICdIZWxsbyB3b3JsZCB5ZXQgYWdhaW4hISEnXG4gICAgICAgICAgXSxcbiAgICAgICAgICBzdGF0ZSA9IHtcbiAgICAgICAgICAgIG1lc3NhZ2VzXG4gICAgICAgICAgfTtcblxuICAgIGNvbW1lbnRzTGlzdC5zZXRTdGF0ZShzdGF0ZSk7XG4gIH0sIDEwMDApOyAvLy9cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdmFuaWxsYUFwcDtcbiJdfQ==