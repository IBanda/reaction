"use strict";

var React = require("../react"),
    ReactDOM = require("../reactDOM");

var Comment = React.createClass({
  render: function render() {
    return /*#__PURE__*/React.createElement("div", {
      className: "comment"
    }, /*#__PURE__*/React.createElement("p", null, this.props.message));
  },
  componentDidMount: function componentDidMount() {
    var message = this.props.message;
    console.log("Comment mounted with message: " + message);
  },
  componentWillUnmount: function componentWillUnmount() {
    var message = this.props.message;
    console.log("Comment unmounted with message: " + message);
  }
});
var CommentsList = React.createClass({
  getInitialState: function getInitialState() {
    var messages = ["Hello, world!", "Hello world again..."],
        state = {
      messages: messages
    };
    return state;
  },
  componentDidMount: function componentDidMount() {
    console.log("Comments list mounted.");
  },
  render: function render() {
    var state = this.getState(),
        messages = state.messages,
        comments = messages.map(function (message) {
      return /*#__PURE__*/React.createElement(Comment, {
        message: message
      });
    });
    return /*#__PURE__*/React.createElement("div", {
      className: "comments-list"
    }, comments);
  }
});

var vanillaApp = function vanillaApp() {
  var commentsList = /*#__PURE__*/React.createElement(CommentsList, null),
      rootDOMElement = document.getElementById("root");
  ReactDOM.render(commentsList, rootDOMElement);
  setTimeout(function () {
    var messages = ["Hello world yet again!!!"],
        state = {
      messages: messages
    };
    commentsList.setState(state);
  }, 1000); ///
};

module.exports = vanillaApp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZhbmlsbGFBcHAuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiUmVhY3RET00iLCJDb21tZW50IiwiY3JlYXRlQ2xhc3MiLCJyZW5kZXIiLCJwcm9wcyIsIm1lc3NhZ2UiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnNvbGUiLCJsb2ciLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIkNvbW1lbnRzTGlzdCIsImdldEluaXRpYWxTdGF0ZSIsIm1lc3NhZ2VzIiwic3RhdGUiLCJnZXRTdGF0ZSIsImNvbW1lbnRzIiwibWFwIiwidmFuaWxsYUFwcCIsImNvbW1lbnRzTGlzdCIsInJvb3RET01FbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInNldFRpbWVvdXQiLCJzZXRTdGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBckI7QUFBQSxJQUNNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBRHhCOztBQUdBLElBQU1FLE9BQU8sR0FBR0gsS0FBSyxDQUFDSSxXQUFOLENBQWtCO0FBQ2hDQyxFQUFBQSxNQUFNLEVBQUUsa0JBQVc7QUFDakIsd0JBRUU7QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLG9CQUNFLCtCQUNHLEtBQUtDLEtBQUwsQ0FBV0MsT0FEZCxDQURGLENBRkY7QUFTRCxHQVgrQjtBQWFoQ0MsRUFBQUEsaUJBQWlCLEVBQUUsNkJBQVc7QUFDNUIsUUFBTUQsT0FBTyxHQUFHLEtBQUtELEtBQUwsQ0FBV0MsT0FBM0I7QUFFQUUsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUNBQW1DSCxPQUEvQztBQUNELEdBakIrQjtBQW1CaENJLEVBQUFBLG9CQUFvQixFQUFFLGdDQUFXO0FBQy9CLFFBQU1KLE9BQU8sR0FBRyxLQUFLRCxLQUFMLENBQVdDLE9BQTNCO0FBRUFFLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHFDQUFxQ0gsT0FBakQ7QUFDRDtBQXZCK0IsQ0FBbEIsQ0FBaEI7QUEwQkEsSUFBTUssWUFBWSxHQUFHWixLQUFLLENBQUNJLFdBQU4sQ0FBa0I7QUFDckNTLEVBQUFBLGVBRHFDLDZCQUNuQjtBQUNoQixRQUFNQyxRQUFRLEdBQUcsQ0FDVCxlQURTLEVBRVQsc0JBRlMsQ0FBakI7QUFBQSxRQUlNQyxLQUFLLEdBQUc7QUFDTkQsTUFBQUEsUUFBUSxFQUFSQTtBQURNLEtBSmQ7QUFRQSxXQUFPQyxLQUFQO0FBQ0QsR0FYb0M7QUFhckNQLEVBQUFBLGlCQUFpQixFQUFFLDZCQUFXO0FBQzVCQyxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWjtBQUNELEdBZm9DO0FBaUJyQ0wsRUFBQUEsTUFBTSxFQUFFLGtCQUFXO0FBQ1gsUUFBQVUsS0FBSyxHQUFHLEtBQUtDLFFBQUwsRUFBUjtBQUFBLFFBQ0VGLFFBREYsR0FDZUMsS0FEZixDQUNFRCxRQURGO0FBQUEsUUFFQUcsUUFGQSxHQUVXSCxRQUFRLENBQUNJLEdBQVQsQ0FBYSxVQUFDWCxPQUFEO0FBQUEsMEJBRXRCLG9CQUFDLE9BQUQ7QUFBUyxRQUFBLE9BQU8sRUFBRUE7QUFBbEIsUUFGc0I7QUFBQSxLQUFiLENBRlg7QUFRTix3QkFFRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDR1UsUUFESCxDQUZGO0FBT0Q7QUFqQ29DLENBQWxCLENBQXJCOztBQW9DQSxJQUFNRSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFNO0FBQ3ZCLE1BQU1DLFlBQVksZ0JBRVYsb0JBQUMsWUFBRCxPQUZSO0FBQUEsTUFLTUMsY0FBYyxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsTUFBeEIsQ0FMdkI7QUFRQXJCLEVBQUFBLFFBQVEsQ0FBQ0csTUFBVCxDQUNFZSxZQURGLEVBRUVDLGNBRkY7QUFLQUcsRUFBQUEsVUFBVSxDQUFDLFlBQVc7QUFDcEIsUUFBTVYsUUFBUSxHQUFHLENBQ1QsMEJBRFMsQ0FBakI7QUFBQSxRQUdNQyxLQUFLLEdBQUc7QUFDTkQsTUFBQUEsUUFBUSxFQUFSQTtBQURNLEtBSGQ7QUFPQU0sSUFBQUEsWUFBWSxDQUFDSyxRQUFiLENBQXNCVixLQUF0QjtBQUNELEdBVFMsRUFTUCxJQVRPLENBQVYsQ0FkdUIsQ0F1QmI7QUFDWCxDQXhCRDs7QUEwQkFXLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlIsVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwiLi4vcmVhY3RcIiksXG4gICAgICBSZWFjdERPTSA9IHJlcXVpcmUoXCIuLi9yZWFjdERPTVwiKTtcblxuY29uc3QgQ29tbWVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKFxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1lbnRcIj5cbiAgICAgICAgPHA+XG4gICAgICAgICAge3RoaXMucHJvcHMubWVzc2FnZX1cbiAgICAgICAgPC9wPlxuICAgICAgPC9kaXY+XG5cbiAgICApO1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5wcm9wcy5tZXNzYWdlO1xuXG4gICAgY29uc29sZS5sb2coXCJDb21tZW50IG1vdW50ZWQgd2l0aCBtZXNzYWdlOiBcIiArIG1lc3NhZ2UpXG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnByb3BzLm1lc3NhZ2U7XG5cbiAgICBjb25zb2xlLmxvZyhcIkNvbW1lbnQgdW5tb3VudGVkIHdpdGggbWVzc2FnZTogXCIgKyBtZXNzYWdlKVxuICB9XG59KTtcblxuY29uc3QgQ29tbWVudHNMaXN0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBbXG4gICAgICAgICAgICBcIkhlbGxvLCB3b3JsZCFcIixcbiAgICAgICAgICAgIFwiSGVsbG8gd29ybGQgYWdhaW4uLi5cIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgc3RhdGUgPSB7XG4gICAgICAgICAgICBtZXNzYWdlc1xuICAgICAgICAgIH07XG5cbiAgICByZXR1cm4gc3RhdGU7XG4gIH0sXG5cbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKFwiQ29tbWVudHMgbGlzdCBtb3VudGVkLlwiKVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICAgICAgeyBtZXNzYWdlcyB9ID0gc3RhdGUsXG4gICAgICAgICAgY29tbWVudHMgPSBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+XG5cbiAgICAgICAgICAgIDxDb21tZW50IG1lc3NhZ2U9e21lc3NhZ2V9IC8+XG5cbiAgICAgICAgICApO1xuXG4gICAgcmV0dXJuIChcblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21tZW50cy1saXN0XCI+XG4gICAgICAgIHtjb21tZW50c31cbiAgICAgIDwvZGl2PlxuXG4gICAgKTtcbiAgfVxufSk7XG5cbmNvbnN0IHZhbmlsbGFBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbW1lbnRzTGlzdCA9XG5cbiAgICAgICAgICA8Q29tbWVudHNMaXN0IC8+XG5cbiAgICAgICAgLFxuICAgICAgICByb290RE9NRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKTtcblxuXG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICBjb21tZW50c0xpc3QsXG4gICAgcm9vdERPTUVsZW1lbnRcbiAgKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gW1xuICAgICAgICAgICAgXCJIZWxsbyB3b3JsZCB5ZXQgYWdhaW4hISFcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgc3RhdGUgPSB7XG4gICAgICAgICAgICBtZXNzYWdlc1xuICAgICAgICAgIH07XG5cbiAgICBjb21tZW50c0xpc3Quc2V0U3RhdGUoc3RhdGUpO1xuICB9LCAxMDAwKTsgLy8vXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbmlsbGFBcHA7XG4iXX0=