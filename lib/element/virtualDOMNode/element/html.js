'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VirtualDOMElement = require('../element');

var VirtualDOMHTMLElement = function (_VirtualDOMElement) {
	_inherits(VirtualDOMHTMLElement, _VirtualDOMElement);

	function VirtualDOMHTMLElement(tagName, props) {
		_classCallCheck(this, VirtualDOMHTMLElement);

		var domElement = document.createElement(tagName);

		return _possibleConstructorReturn(this, (VirtualDOMHTMLElement.__proto__ || Object.getPrototypeOf(VirtualDOMHTMLElement)).call(this, props, domElement));
	}

	_createClass(VirtualDOMHTMLElement, [{
		key: 'isAttributeName',
		value: function isAttributeName(name) {
			return attributeNames.includes(name);
		}
	}]);

	return VirtualDOMHTMLElement;
}(VirtualDOMElement);

module.exports = VirtualDOMHTMLElement;

var attributeNames = ['accept', 'acceptCharset', 'accessKey', 'action', 'allowFullScreen', 'allowTransparency', 'alt', 'async', 'autoComplete', 'autoFocus', 'autoPlay', 'capture', 'cellPadding', 'cellSpacing', 'challenge', 'charSet', 'checked', 'cite', 'classID', 'className', 'colSpan', 'cols', 'content', 'contentEditable', 'contextMenu', 'controls', 'coords', 'crossOrigin', 'data', 'dateTime', 'default', 'defer', 'dir', 'disabled', 'download', 'draggable', 'encType', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'frameBorder', 'headers', 'height', 'hidden', 'high', 'href', 'hrefLang', 'htmlFor', 'httpEquiv', 'icon', 'id', 'inputMode', 'integrity', 'is', 'keyParams', 'keyType', 'kind', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight', 'marginWidth', 'max', 'maxLength', 'media', 'mediaGroup', 'method', 'min', 'minLength', 'multiple', 'muted', 'name', 'noValidate', 'nonce', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'profile', 'radioGroup', 'readOnly', 'rel', 'required', 'reversed', 'role', 'rowSpan', 'rows', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected', 'shape', 'size', 'sizes', 'span', 'spellCheck', 'src', 'srcDoc', 'srcLang', 'srcSet', 'start', 'step', 'style', 'summary', 'tabIndex', 'target', 'title', 'type', 'useMap', 'value', 'width', 'wmode', 'wrap'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2VzNi9lbGVtZW50L3ZpcnR1YWxET01Ob2RlL2VsZW1lbnQvaHRtbC5qcyJdLCJuYW1lcyI6WyJWaXJ0dWFsRE9NRWxlbWVudCIsInJlcXVpcmUiLCJWaXJ0dWFsRE9NSFRNTEVsZW1lbnQiLCJ0YWdOYW1lIiwicHJvcHMiLCJkb21FbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibmFtZSIsImF0dHJpYnV0ZU5hbWVzIiwiaW5jbHVkZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQUVBLElBQU1BLG9CQUFvQkMsUUFBUSxZQUFSLENBQTFCOztJQUVNQyxxQjs7O0FBQ0wsZ0NBQVlDLE9BQVosRUFBcUJDLEtBQXJCLEVBQTRCO0FBQUE7O0FBQzNCLE1BQU1DLGFBQWFDLFNBQVNDLGFBQVQsQ0FBdUJKLE9BQXZCLENBQW5COztBQUQyQix1SUFHckJDLEtBSHFCLEVBR2RDLFVBSGM7QUFJM0I7Ozs7a0NBRWVHLEksRUFBTTtBQUNyQixVQUFPQyxlQUFlQyxRQUFmLENBQXdCRixJQUF4QixDQUFQO0FBQ0E7Ozs7RUFUa0NSLGlCOztBQVlwQ1csT0FBT0MsT0FBUCxHQUFpQlYscUJBQWpCOztBQUVBLElBQU1PLGlCQUFpQixDQUN0QixRQURzQixFQUNaLGVBRFksRUFDSyxXQURMLEVBQ2tCLFFBRGxCLEVBQzRCLGlCQUQ1QixFQUMrQyxtQkFEL0MsRUFDb0UsS0FEcEUsRUFDMkUsT0FEM0UsRUFDb0YsY0FEcEYsRUFDb0csV0FEcEcsRUFDaUgsVUFEakgsRUFFdEIsU0FGc0IsRUFFWCxhQUZXLEVBRUksYUFGSixFQUVtQixXQUZuQixFQUVnQyxTQUZoQyxFQUUyQyxTQUYzQyxFQUVzRCxNQUZ0RCxFQUU4RCxTQUY5RCxFQUV5RSxXQUZ6RSxFQUVzRixTQUZ0RixFQUVpRyxNQUZqRyxFQUV5RyxTQUZ6RyxFQUVvSCxpQkFGcEgsRUFFdUksYUFGdkksRUFFc0osVUFGdEosRUFFa0ssUUFGbEssRUFFNEssYUFGNUssRUFHdEIsTUFIc0IsRUFHZCxVQUhjLEVBR0YsU0FIRSxFQUdTLE9BSFQsRUFHa0IsS0FIbEIsRUFHeUIsVUFIekIsRUFHcUMsVUFIckMsRUFHaUQsV0FIakQsRUFJdEIsU0FKc0IsRUFLdEIsTUFMc0IsRUFLZCxZQUxjLEVBS0EsYUFMQSxFQUtlLFlBTGYsRUFLNkIsZ0JBTDdCLEVBSytDLFlBTC9DLEVBSzZELGFBTDdELEVBTXRCLFNBTnNCLEVBTVgsUUFOVyxFQU1ELFFBTkMsRUFNUyxNQU5ULEVBTWlCLE1BTmpCLEVBTXlCLFVBTnpCLEVBTXFDLFNBTnJDLEVBTWdELFdBTmhELEVBT3RCLE1BUHNCLEVBT2QsSUFQYyxFQU9SLFdBUFEsRUFPSyxXQVBMLEVBT2tCLElBUGxCLEVBUXRCLFdBUnNCLEVBUVQsU0FSUyxFQVFFLE1BUkYsRUFTdEIsT0FUc0IsRUFTYixNQVRhLEVBU0wsTUFUSyxFQVNHLE1BVEgsRUFTVyxLQVRYLEVBVXRCLFVBVnNCLEVBVVYsY0FWVSxFQVVNLGFBVk4sRUFVcUIsS0FWckIsRUFVNEIsV0FWNUIsRUFVeUMsT0FWekMsRUFVa0QsWUFWbEQsRUFVZ0UsUUFWaEUsRUFVMEUsS0FWMUUsRUFVaUYsV0FWakYsRUFVOEYsVUFWOUYsRUFVMEcsT0FWMUcsRUFXdEIsTUFYc0IsRUFXZCxZQVhjLEVBV0EsT0FYQSxFQVl0QixNQVpzQixFQVlkLFNBWmMsRUFhdEIsU0Fic0IsRUFhWCxhQWJXLEVBYUksUUFiSixFQWFjLFNBYmQsRUFheUIsU0FiekIsRUFjdEIsWUFkc0IsRUFjUixVQWRRLEVBY0ksS0FkSixFQWNXLFVBZFgsRUFjdUIsVUFkdkIsRUFjbUMsTUFkbkMsRUFjMkMsU0FkM0MsRUFjc0QsTUFkdEQsRUFldEIsU0Fmc0IsRUFlWCxPQWZXLEVBZUYsUUFmRSxFQWVRLFdBZlIsRUFlcUIsVUFmckIsRUFlaUMsVUFmakMsRUFlNkMsT0FmN0MsRUFlc0QsTUFmdEQsRUFlOEQsT0FmOUQsRUFldUUsTUFmdkUsRUFlK0UsWUFmL0UsRUFlNkYsS0FmN0YsRUFlb0csUUFmcEcsRUFlOEcsU0FmOUcsRUFleUgsUUFmekgsRUFlbUksT0FmbkksRUFlNEksTUFmNUksRUFlb0osT0FmcEosRUFlNkosU0FmN0osRUFnQnRCLFVBaEJzQixFQWdCVixRQWhCVSxFQWdCQSxPQWhCQSxFQWdCUyxNQWhCVCxFQWlCdEIsUUFqQnNCLEVBa0J0QixPQWxCc0IsRUFtQnRCLE9BbkJzQixFQW9CdEIsT0FwQnNCLEVBcUJ0QixNQXJCc0IsQ0FBdkIiLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgVmlydHVhbERPTUVsZW1lbnQgPSByZXF1aXJlKCcuLi9lbGVtZW50Jyk7XG5cbmNsYXNzIFZpcnR1YWxET01IVE1MRWxlbWVudCBleHRlbmRzIFZpcnR1YWxET01FbGVtZW50IHtcblx0Y29uc3RydWN0b3IodGFnTmFtZSwgcHJvcHMpIHtcblx0XHRjb25zdCBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcblxuXHRcdHN1cGVyKHByb3BzLCBkb21FbGVtZW50KTtcblx0fVxuXG5cdGlzQXR0cmlidXRlTmFtZShuYW1lKSB7XG5cdFx0cmV0dXJuIGF0dHJpYnV0ZU5hbWVzLmluY2x1ZGVzKG5hbWUpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVmlydHVhbERPTUhUTUxFbGVtZW50O1xuXG5jb25zdCBhdHRyaWJ1dGVOYW1lcyA9IFtcblx0J2FjY2VwdCcsICdhY2NlcHRDaGFyc2V0JywgJ2FjY2Vzc0tleScsICdhY3Rpb24nLCAnYWxsb3dGdWxsU2NyZWVuJywgJ2FsbG93VHJhbnNwYXJlbmN5JywgJ2FsdCcsICdhc3luYycsICdhdXRvQ29tcGxldGUnLCAnYXV0b0ZvY3VzJywgJ2F1dG9QbGF5Jyxcblx0J2NhcHR1cmUnLCAnY2VsbFBhZGRpbmcnLCAnY2VsbFNwYWNpbmcnLCAnY2hhbGxlbmdlJywgJ2NoYXJTZXQnLCAnY2hlY2tlZCcsICdjaXRlJywgJ2NsYXNzSUQnLCAnY2xhc3NOYW1lJywgJ2NvbFNwYW4nLCAnY29scycsICdjb250ZW50JywgJ2NvbnRlbnRFZGl0YWJsZScsICdjb250ZXh0TWVudScsICdjb250cm9scycsICdjb29yZHMnLCAnY3Jvc3NPcmlnaW4nLFxuXHQnZGF0YScsICdkYXRlVGltZScsICdkZWZhdWx0JywgJ2RlZmVyJywgJ2RpcicsICdkaXNhYmxlZCcsICdkb3dubG9hZCcsICdkcmFnZ2FibGUnLFxuXHQnZW5jVHlwZScsXG5cdCdmb3JtJywgJ2Zvcm1BY3Rpb24nLCAnZm9ybUVuY1R5cGUnLCAnZm9ybU1ldGhvZCcsICdmb3JtTm9WYWxpZGF0ZScsICdmb3JtVGFyZ2V0JywgJ2ZyYW1lQm9yZGVyJyxcblx0J2hlYWRlcnMnLCAnaGVpZ2h0JywgJ2hpZGRlbicsICdoaWdoJywgJ2hyZWYnLCAnaHJlZkxhbmcnLCAnaHRtbEZvcicsICdodHRwRXF1aXYnLFxuXHQnaWNvbicsICdpZCcsICdpbnB1dE1vZGUnLCAnaW50ZWdyaXR5JywgJ2lzJyxcblx0J2tleVBhcmFtcycsICdrZXlUeXBlJywgJ2tpbmQnLFxuXHQnbGFiZWwnLCAnbGFuZycsICdsaXN0JywgJ2xvb3AnLCAnbG93Jyxcblx0J21hbmlmZXN0JywgJ21hcmdpbkhlaWdodCcsICdtYXJnaW5XaWR0aCcsICdtYXgnLCAnbWF4TGVuZ3RoJywgJ21lZGlhJywgJ21lZGlhR3JvdXAnLCAnbWV0aG9kJywgJ21pbicsICdtaW5MZW5ndGgnLCAnbXVsdGlwbGUnLCAnbXV0ZWQnLFxuXHQnbmFtZScsICdub1ZhbGlkYXRlJywgJ25vbmNlJyxcblx0J29wZW4nLCAnb3B0aW11bScsXG5cdCdwYXR0ZXJuJywgJ3BsYWNlaG9sZGVyJywgJ3Bvc3RlcicsICdwcmVsb2FkJywgJ3Byb2ZpbGUnLFxuXHQncmFkaW9Hcm91cCcsICdyZWFkT25seScsICdyZWwnLCAncmVxdWlyZWQnLCAncmV2ZXJzZWQnLCAncm9sZScsICdyb3dTcGFuJywgJ3Jvd3MnLFxuXHQnc2FuZGJveCcsICdzY29wZScsICdzY29wZWQnLCAnc2Nyb2xsaW5nJywgJ3NlYW1sZXNzJywgJ3NlbGVjdGVkJywgJ3NoYXBlJywgJ3NpemUnLCAnc2l6ZXMnLCAnc3BhbicsICdzcGVsbENoZWNrJywgJ3NyYycsICdzcmNEb2MnLCAnc3JjTGFuZycsICdzcmNTZXQnLCAnc3RhcnQnLCAnc3RlcCcsICdzdHlsZScsICdzdW1tYXJ5Jyxcblx0J3RhYkluZGV4JywgJ3RhcmdldCcsICd0aXRsZScsICd0eXBlJyxcblx0J3VzZU1hcCcsXG5cdCd2YWx1ZScsXG5cdCd3aWR0aCcsXG5cdCd3bW9kZScsXG5cdCd3cmFwJ1xuXTtcbiJdfQ==