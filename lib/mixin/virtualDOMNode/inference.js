'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function spliceChildren(start, removedChildrenCount, addedChildren, context) {
  var childParent = this,
      childReference = null,
      childContext = context;

  addedChildren.forEach(function (addedChild) {
    addedChild.mount(childParent, childReference, childContext);
  });

  var args = [start, removedChildrenCount].concat(addedChildren),
      removedChildren = Array.prototype.splice.apply(this.children, args);

  removedChildren.forEach(function (removedChild) {
    removedChild.unmount(childContext);
  });
}

function addChild(child, context) {
  var start = Infinity,
      removedChildrenCount = 0,
      addedChildren = [child];

  this.spliceChildren(start, removedChildrenCount, addedChildren, context);
}

function removeChild(child, context) {
  var index = this.children.indexOf(child);

  if (index > -1) {
    var start = index,
        removedChildrenCount = 1,
        addedChildren = [];

    this.spliceChildren(start, removedChildrenCount, addedChildren, context);
  }
}

function setAttribute(name, value) {
  if (name === 'className') {
    name = 'class';
  }

  if (name === 'htmlFor') {
    name = 'for';
  }

  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    var keys = Object.keys(value);

    keys.forEach(function (key) {
      this.domElement[name][key] = value[key];
    }.bind(this));
  } else if (typeof value === 'boolean') {
    if (value) {
      value = name; ///

      this.domElement.setAttribute(name, value);
    }
  } else {
    this.domElement.setAttribute(name, value);
  }
}

function getAttribute(name) {
  return this.domElement.getAttribute(name);
}

function clearAttribute(name) {
  this.domElement.removeAttribute(name);
}

function addAttribute(name, value) {
  this.setAttribute(name, value);
}

function removeAttribute(name) {
  this.clearAttribute(name);
}

function setClass(className) {
  this.domElement.className = className;
}

function addClass(className) {
  this.domElement.classList.add(className);
}

function removeClass(className) {
  this.domElement.classList.remove(className);
}

function toggleClass(className) {
  this.domElement.classList.toggle(className);
}

function hasClass(className) {
  return this.domElement.classList.contains(className);
}

function hasClasses(classNames) {
  return classNames.every(function (className) {
    return this.hasClass(className);
  }.bind(this));
}

function clearClasses() {
  this.domElement.className = '';
}

function getTagName() {
  return this.domElement.tagName;
}

var inferenceMixin = {
  spliceChildren: spliceChildren,
  addChild: addChild,
  removeChild: removeChild,
  setAttribute: setAttribute,
  getAttribute: getAttribute,
  clearAttribute: clearAttribute,
  addAttribute: addAttribute,
  removeAttribute: removeAttribute,
  setClass: setClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  hasClass: hasClass,
  hasClasses: hasClasses,
  clearClasses: clearClasses,
  getTagName: getTagName
};

module.exports = inferenceMixin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2VzNi9taXhpbi92aXJ0dWFsRE9NTm9kZS9pbmZlcmVuY2UuanMiXSwibmFtZXMiOlsic3BsaWNlQ2hpbGRyZW4iLCJzdGFydCIsInJlbW92ZWRDaGlsZHJlbkNvdW50IiwiYWRkZWRDaGlsZHJlbiIsImNvbnRleHQiLCJjaGlsZFBhcmVudCIsImNoaWxkUmVmZXJlbmNlIiwiY2hpbGRDb250ZXh0IiwiZm9yRWFjaCIsImFkZGVkQ2hpbGQiLCJtb3VudCIsImFyZ3MiLCJjb25jYXQiLCJyZW1vdmVkQ2hpbGRyZW4iLCJBcnJheSIsInByb3RvdHlwZSIsInNwbGljZSIsImFwcGx5IiwiY2hpbGRyZW4iLCJyZW1vdmVkQ2hpbGQiLCJ1bm1vdW50IiwiYWRkQ2hpbGQiLCJjaGlsZCIsIkluZmluaXR5IiwicmVtb3ZlQ2hpbGQiLCJpbmRleCIsImluZGV4T2YiLCJzZXRBdHRyaWJ1dGUiLCJuYW1lIiwidmFsdWUiLCJrZXlzIiwiT2JqZWN0Iiwia2V5IiwiZG9tRWxlbWVudCIsImJpbmQiLCJnZXRBdHRyaWJ1dGUiLCJjbGVhckF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImFkZEF0dHJpYnV0ZSIsInNldENsYXNzIiwiY2xhc3NOYW1lIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsInRvZ2dsZUNsYXNzIiwidG9nZ2xlIiwiaGFzQ2xhc3MiLCJjb250YWlucyIsImhhc0NsYXNzZXMiLCJjbGFzc05hbWVzIiwiZXZlcnkiLCJjbGVhckNsYXNzZXMiLCJnZXRUYWdOYW1lIiwidGFnTmFtZSIsImluZmVyZW5jZU1peGluIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxTQUFTQSxjQUFULENBQXdCQyxLQUF4QixFQUErQkMsb0JBQS9CLEVBQXFEQyxhQUFyRCxFQUFvRUMsT0FBcEUsRUFBNkU7QUFDM0UsTUFBTUMsY0FBYyxJQUFwQjtBQUFBLE1BQ01DLGlC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O0FBQ3JCeEQsa0JBQWdCQSxjQURLO0FBRXJCcUIsWUFBVUEsUUFGVztBQUdyQkcsZUFBYUEsV0FIUTtBQUlyQkcsZ0JBQWNBLFlBSk87QUFLckJRLGdCQUFjQSxZQUxPO0FBTXJCQyxrQkFBZ0JBLGNBTks7QUFPckJFLGdCQUFjQSxZQVBPO0FBUXJCRCxtQkFBaUJBLGVBUkk7QUFTckJFLFlBQVVBLFFBVFc7QUFVckJFLFlBQVVBLFFBVlc7QUFXckJHLGVBQWFBLFdBWFE7QUFZckJFLGVBQWFBLFdBWlE7QUFhckJFLFlBQVVBLFFBYlc7QUFjckJFLGNBQVlBLFVBZFM7QUFlckJHLGdCQUFjQSxZQWZPO0FBZ0JyQkMsY0FBWUE7QUFoQlMsQ0FBdkI7O0FBbUJBRyxPQUFPQyxPQUFQLEdBQWlCRixjQUFqQiIsImZpbGUiOiJpbmZlcmVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHNwbGljZUNoaWxkcmVuKHN0YXJ0LCByZW1vdmVkQ2hpbGRyZW5Db3VudCwgYWRkZWRDaGlsZHJlbiwgY29udGV4dCkge1xuICBjb25zdCBjaGlsZFBhcmVudCA9IHRoaXMsXG4gICAgICAgIGNoaWxkUmVmZXJlbmNlID0gbnVsbCxcbiAgICAgICAgY2hpbGRDb250ZXh0ID0gY29udGV4dDtcblxuICBhZGRlZENoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24oYWRkZWRDaGlsZCkge1xuICAgIGFkZGVkQ2hpbGQubW91bnQoY2hpbGRQYXJlbnQsIGNoaWxkUmVmZXJlbmNlLCBjaGlsZENvbnRleHQpO1xuICB9KTtcblxuICBjb25zdCBhcmdzID0gW3N0YXJ0LCByZW1vdmVkQ2hpbGRyZW5Db3VudF0uY29uY2F0KGFkZGVkQ2hpbGRyZW4pLFxuICAgICAgICByZW1vdmVkQ2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHRoaXMuY2hpbGRyZW4sIGFyZ3MpO1xuXG4gIHJlbW92ZWRDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uKHJlbW92ZWRDaGlsZCkge1xuICAgIHJlbW92ZWRDaGlsZC51bm1vdW50KGNoaWxkQ29udGV4dCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRDaGlsZChjaGlsZCwgY29udGV4dCkge1xuICBjb25zdCBzdGFydCA9IEluZmluaXR5LFxuICAgICAgICByZW1vdmVkQ2hpbGRyZW5Db3VudCA9IDAsXG4gICAgICAgIGFkZGVkQ2hpbGRyZW4gPSBbY2hpbGRdO1xuXG4gIHRoaXMuc3BsaWNlQ2hpbGRyZW4oc3RhcnQsIHJlbW92ZWRDaGlsZHJlbkNvdW50LCBhZGRlZENoaWxkcmVuLCBjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQoY2hpbGQsIGNvbnRleHQpIHtcbiAgY29uc3QgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuXG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBpbmRleCxcbiAgICAgICAgICByZW1vdmVkQ2hpbGRyZW5Db3VudCA9IDEsXG4gICAgICAgICAgYWRkZWRDaGlsZHJlbiA9IFtdO1xuXG4gICAgdGhpcy5zcGxpY2VDaGlsZHJlbihzdGFydCwgcmVtb3ZlZENoaWxkcmVuQ291bnQsIGFkZGVkQ2hpbGRyZW4sIGNvbnRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkge1xuICBpZiAobmFtZSA9PT0gJ2NsYXNzTmFtZScpIHtcbiAgICBuYW1lID0gJ2NsYXNzJztcbiAgfVxuXG4gIGlmIChuYW1lID09PSAnaHRtbEZvcicpIHtcbiAgICBuYW1lID0gJ2Zvcic7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdGhpcy5kb21FbGVtZW50W25hbWVdW2tleV0gPSB2YWx1ZVtrZXldO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gbmFtZTsgLy8vXG5cbiAgICAgIHRoaXMuZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUobmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTsgfVxuXG5mdW5jdGlvbiBjbGVhckF0dHJpYnV0ZShuYW1lKSB7IHRoaXMuZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7IH1cblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7IHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTsgfVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUobmFtZSkgeyB0aGlzLmNsZWFyQXR0cmlidXRlKG5hbWUpOyB9XG5cbmZ1bmN0aW9uIHNldENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lOyB9XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkgeyB0aGlzLmRvbUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9XG5cbmZ1bmN0aW9uIGhhc0NsYXNzZXMoY2xhc3NOYW1lcykge1xuICByZXR1cm4gY2xhc3NOYW1lcy5ldmVyeShmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDbGFzcyhjbGFzc05hbWUpO1xuICB9LmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBjbGVhckNsYXNzZXMoKSB7IHRoaXMuZG9tRWxlbWVudC5jbGFzc05hbWUgPSAnJzsgfVxuXG5mdW5jdGlvbiBnZXRUYWdOYW1lKCkgeyByZXR1cm4gdGhpcy5kb21FbGVtZW50LnRhZ05hbWU7IH1cblxuY29uc3QgaW5mZXJlbmNlTWl4aW4gPSB7XG4gIHNwbGljZUNoaWxkcmVuOiBzcGxpY2VDaGlsZHJlbixcbiAgYWRkQ2hpbGQ6IGFkZENoaWxkLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIHNldEF0dHJpYnV0ZTogc2V0QXR0cmlidXRlLFxuICBnZXRBdHRyaWJ1dGU6IGdldEF0dHJpYnV0ZSxcbiAgY2xlYXJBdHRyaWJ1dGU6IGNsZWFyQXR0cmlidXRlLFxuICBhZGRBdHRyaWJ1dGU6IGFkZEF0dHJpYnV0ZSxcbiAgcmVtb3ZlQXR0cmlidXRlOiByZW1vdmVBdHRyaWJ1dGUsXG4gIHNldENsYXNzOiBzZXRDbGFzcyxcbiAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXG4gIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgaGFzQ2xhc3M6IGhhc0NsYXNzLFxuICBoYXNDbGFzc2VzOiBoYXNDbGFzc2VzLFxuICBjbGVhckNsYXNzZXM6IGNsZWFyQ2xhc3NlcyxcbiAgZ2V0VGFnTmFtZTogZ2V0VGFnTmFtZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbmZlcmVuY2VNaXhpbjtcbiJdfQ==